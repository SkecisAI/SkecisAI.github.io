<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr. Liu&#39;s Blog</title>
  
  <subtitle>一个有梦想的人工智能爱好者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.skecis.top/"/>
  <updated>2019-11-06T14:59:18.874Z</updated>
  <id>http://www.skecis.top/</id>
  
  <author>
    <name>SkecisAI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用python实现链式栈</title>
    <link href="http://www.skecis.top/2019/11/06/python-stack/"/>
    <id>http://www.skecis.top/2019/11/06/python-stack/</id>
    <published>2019-11-06T14:11:05.000Z</published>
    <updated>2019-11-06T14:59:18.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一种线性的数据结构。栈的定义是：限定仅在表尾进行插入或删除操作的线性表(线性表的介绍参见我的另一篇<a href="https://skecis.top/2019/11/01/python%E9%93%BE%E8%A1%A8/#more" target="_blank" rel="noopener">博文</a>)。直观一点来看，如下图<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E6%A0%88/1.png" alt><br>即最后进栈的元素最先出来，又称为<strong>后进先出</strong>的线性表</p><a id="more"></a><h2 id="链式栈基本数据结构"><a href="#链式栈基本数据结构" class="headerlink" title="链式栈基本数据结构"></a>链式栈基本数据结构</h2><p>链式栈即是链式表构成的，通过指针相连。实现过程如下</p><h3 id="链式栈基本单元-节点-Node"><a href="#链式栈基本单元-节点-Node" class="headerlink" title="链式栈基本单元: 节点(Node)"></a>链式栈基本单元: 节点(Node)</h3><p>创建<code>Node</code>类</p><ul><li>值域</li><li>指针域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, v):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :param v: the value of node</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.value = v</span><br><span class="line">        self.pnext = None  # the pointer to point next</span><br></pre></td></tr></table></figure><h3 id="链式栈类"><a href="#链式栈类" class="headerlink" title="链式栈类"></a>链式栈类</h3><p>创建<code>LinkedStack</code>类</p><ul><li>top: 栈顶节点</li><li>bottom: 栈底节点</li><li>length: 栈长度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class LinkedStack:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.top = None  # the top node</span><br><span class="line">        self.bottom = None  # the bottom node</span><br><span class="line">        self.length = 0  # the length of this stack</span><br></pre></td></tr></table></figure><h2 id="链式栈操作函数"><a href="#链式栈操作函数" class="headerlink" title="链式栈操作函数"></a>链式栈操作函数</h2><p><code>self</code>参数为对象本身，类似于C++中的<code>this</code>指针</p><h3 id="压栈"><a href="#压栈" class="headerlink" title="压栈"></a>压栈</h3><p>创建<code>push</code>函数</p><ul><li>val: 节点值域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def push(self, val):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    add a value to stack</span><br><span class="line">    :param val: the value</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if not self.stack_empty():</span><br><span class="line">        self.top.pnext = Node(val)</span><br><span class="line">        self.top = self.top.pnext</span><br><span class="line">        self.length += 1</span><br><span class="line">    else:</span><br><span class="line">        self.top = Node(val)</span><br><span class="line">        self.bottom = self.top</span><br><span class="line">        self.length += 1</span><br></pre></td></tr></table></figure><h3 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h3><p>创建<code>pop</code>函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def pop(self):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    delete the node at the top and return its value</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    tmp_top = self.top</span><br><span class="line">    tmp_bottom = self.bottom</span><br><span class="line">    for i in range(1, self.length+1):</span><br><span class="line">        if i == self.length - 1:</span><br><span class="line">            self.top = tmp_bottom</span><br><span class="line">            self.top.pnext = None</span><br><span class="line">            self.length -= 1</span><br><span class="line">        else:</span><br><span class="line">            tmp_bottom = tmp_bottom.pnext</span><br><span class="line">    return tmp_top.value</span><br></pre></td></tr></table></figure></p><h3 id="判断栈是否为空"><a href="#判断栈是否为空" class="headerlink" title="判断栈是否为空"></a>判断栈是否为空</h3><p>创建<code>stack_empty</code>函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def stack_empty(self):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if the stack is empty</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if self.top is None:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure></p><h3 id="获取栈顶元素"><a href="#获取栈顶元素" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h3><p>创建<code>get_top</code>函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def get_top(self):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return the value of top</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return self.top.value</span><br></pre></td></tr></table></figure></p><h3 id="遍历栈-栈底-栈顶"><a href="#遍历栈-栈底-栈顶" class="headerlink" title="遍历栈(栈底-栈顶)"></a>遍历栈(栈底-栈顶)</h3><p>创建<code>stack_traverse</code>函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def stack_traverse(self):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    traverse the stack</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    tmp = self.bottom</span><br><span class="line">    tmp_list = []</span><br><span class="line">    while tmp:</span><br><span class="line">        tmp_list.append(tmp.value)</span><br><span class="line">        tmp = tmp.pnext</span><br><span class="line">    tmp_list = tmp_list[::-1]</span><br><span class="line">    print(&quot;\n-----栈顶-----&quot;)</span><br><span class="line">    for val in tmp_list:</span><br><span class="line">        print(val)</span><br><span class="line">    print(&quot;--------------\n&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h2><p>创建程序入口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    my_stack = LinkedStack()</span><br><span class="line">    my_stack.push([&apos;start&apos;])</span><br><span class="line">    my_stack.push(12)</span><br><span class="line">    my_stack.push(2323)</span><br><span class="line">    my_stack.push([&apos;end&apos;])</span><br><span class="line">    my_stack.stack_traverse()</span><br><span class="line">    print(my_stack.pop())</span><br><span class="line">    my_stack.stack_traverse()</span><br><span class="line">    print(my_stack.length)</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-----栈顶-----</span><br><span class="line">[&apos;end&apos;]</span><br><span class="line">2323</span><br><span class="line">12</span><br><span class="line">[&apos;start&apos;]</span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">[&apos;end&apos;]</span><br><span class="line"></span><br><span class="line">-----栈顶-----</span><br><span class="line">2323</span><br><span class="line">12</span><br><span class="line">[&apos;start&apos;]</span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/SkecisAI/python-DS/blob/master/linked_stack.py" target="_blank" rel="noopener">点击此处访问</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h2&gt;&lt;p&gt;栈是一种线性的数据结构。栈的定义是：限定仅在表尾进行插入或删除操作的线性表(线性表的介绍参见我的另一篇&lt;a href=&quot;https://skecis.top/2019/11/01/python%E9%93%BE%E8%A1%A8/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博文&lt;/a&gt;)。直观一点来看，如下图&lt;br&gt;&lt;img src=&quot;https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E6%A0%88/1.png&quot; alt&gt;&lt;br&gt;即最后进栈的元素最先出来，又称为&lt;strong&gt;后进先出&lt;/strong&gt;的线性表&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="http://www.skecis.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Python" scheme="http://www.skecis.top/tags/Python/"/>
    
      <category term="栈" scheme="http://www.skecis.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>Pandas数据操作：分组和聚合</title>
    <link href="http://www.skecis.top/2019/11/06/pandas-groupby/"/>
    <id>http://www.skecis.top/2019/11/06/pandas-groupby/</id>
    <published>2019-11-06T09:37:12.000Z</published>
    <updated>2019-11-06T11:21:08.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入必要的库"><a href="#导入必要的库" class="headerlink" title="导入必要的库"></a>导入必要的库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br></pre></td></tr></table></figure><h2 id="导入数据集"><a href="#导入数据集" class="headerlink" title="导入数据集"></a>导入数据集</h2><p>我下载了seaborn中的<a href="https://github.com/mwaskom/seaborn-data" target="_blank" rel="noopener">数据集</a>(都是小型的数据集)，选择了其中的航班数据集<code>flight.csv</code>，并放入了本地seaborn_dataset文件夹(该文件夹放在项目根目录)中<br>导入flight数据集(使用<code>read_csv</code>函数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flight_df = pd.read_csv(&apos;seaborn_dataset/flights.csv&apos;)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>粗略看看该数据集(使用<code>head</code>函数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(flight_df.head())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   year     month  passengers</span><br><span class="line">0  1949   January         112</span><br><span class="line">1  1949  February         118</span><br><span class="line">2  1949     March         132</span><br><span class="line">3  1949     April         129</span><br><span class="line">4  1949       May         121</span><br></pre></td></tr></table></figure></p><p>再看看数据类型(使用<code>info</code>函数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(flight_df.info())</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;</span><br><span class="line">RangeIndex: 144 entries, 0 to 143</span><br><span class="line">Data columns (total 3 columns):</span><br><span class="line">year          144 non-null int64</span><br><span class="line">month         144 non-null object</span><br><span class="line">passengers    144 non-null int64</span><br><span class="line">dtypes: int64(2), object(1)</span><br><span class="line">memory usage: 3.5+ KB</span><br><span class="line">None</span><br></pre></td></tr></table></figure></p><p>注意其中的<code>year</code>和<code>passengers</code>为int型数据</p><h2 id="根据单个column的值分组"><a href="#根据单个column的值分组" class="headerlink" title="根据单个column的值分组"></a>根据单个column的值分组</h2><h3 id="使用groupby函数"><a href="#使用groupby函数" class="headerlink" title="使用groupby函数"></a>使用<code>groupby</code>函数</h3><p>参数为column名，可代入单个column名，或column名组成的列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grouped = flight_df.groupby(&apos;year&apos;)</span><br><span class="line">print(grouped)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002783D62D860&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到返回的是一个pandas的<strong>分组对象</strong><code>DataFrameGroupBy</code>(或者<code>SeriesGroupBy</code>)</p><h3 id="获取分组数量"><a href="#获取分组数量" class="headerlink" title="获取分组数量"></a>获取分组数量</h3><p>使用分组对象的<code>ngroups</code>属性，类型为一个int型数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(grouped.ngroups)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure></p><h3 id="获取分组内容"><a href="#获取分组内容" class="headerlink" title="获取分组内容"></a>获取分组内容</h3><p>利用分组对象的<code>groups</code>属性，类型为一个字典(dict)，字典的键(key)为组名，值(value)为每一组所有的对应的索引(index)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(grouped.groups)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1949: Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], dtype=&apos;int64&apos;), 1950: Int64Index([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], dtype=&apos;int64&apos;), 1951: Int64Index([24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], dtype=&apos;int64&apos;), 1952: Int64Index([36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], dtype=&apos;int64&apos;), 1953: Int64Index([48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], dtype=&apos;int64&apos;), 1954: Int64Index([60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], dtype=&apos;int64&apos;), 1955: Int64Index([72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], dtype=&apos;int64&apos;), 1956: Int64Index([84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], dtype=&apos;int64&apos;), 1957: Int64Index([96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], dtype=&apos;int64&apos;), 1958: Int64Index([108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], dtype=&apos;int64&apos;), 1959: Int64Index([120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], dtype=&apos;int64&apos;), 1960: Int64Index([132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143], dtype=&apos;int64&apos;)&#125;</span><br></pre></td></tr></table></figure></p><h2 id="访问分组结果"><a href="#访问分组结果" class="headerlink" title="访问分组结果"></a>访问分组结果</h2><h3 id="输出每个组的细节"><a href="#输出每个组的细节" class="headerlink" title="输出每个组的细节"></a>输出每个组的细节</h3><p>编写一个有利于输出分组内容的函数(function)，并调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def print_groups(group_object):</span><br><span class="line">    for name, group in group_object:</span><br><span class="line">        print(name)</span><br><span class="line">        print(group)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_groups(grouped)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1949</span><br><span class="line">    year      month  passengers</span><br><span class="line">0   1949    January         112</span><br><span class="line">1   1949   February         118</span><br><span class="line">2   1949      March         132</span><br><span class="line">3   1949      April         129</span><br><span class="line">4   1949        May         121</span><br><span class="line">5   1949       June         135</span><br><span class="line">6   1949       July         148</span><br><span class="line">7   1949     August         148</span><br><span class="line">8   1949  September         136</span><br><span class="line">9   1949    October         119</span><br><span class="line">10  1949   November         104</span><br><span class="line">11  1949   December         118</span><br><span class="line">1950</span><br><span class="line">    year      month  passengers</span><br><span class="line">12  1950    January         115</span><br><span class="line">13  1950   February         126</span><br><span class="line">14  1950      March         141</span><br><span class="line">15  1950      April         135</span><br><span class="line">16  1950        May         125</span><br><span class="line">17  1950       June         149</span><br><span class="line">18  1950       July         170</span><br><span class="line">19  1950     August         170</span><br><span class="line">20  1950  September         158</span><br><span class="line">21  1950    October         133</span><br><span class="line">22  1950   November         114</span><br><span class="line">23  1950   December         140</span><br><span class="line"></span><br><span class="line">··· ···</span><br><span class="line"></span><br><span class="line">1960</span><br><span class="line">     year      month  passengers</span><br><span class="line">132  1960    January         417</span><br><span class="line">133  1960   February         391</span><br><span class="line">134  1960      March         419</span><br><span class="line">135  1960      April         461</span><br><span class="line">136  1960        May         472</span><br><span class="line">137  1960       June         535</span><br><span class="line">138  1960       July         622</span><br><span class="line">139  1960     August         606</span><br><span class="line">140  1960  September         508</span><br><span class="line">141  1960    October         461</span><br><span class="line">142  1960   November         390</span><br><span class="line">143  1960   December         432</span><br></pre></td></tr></table></figure></p><h3 id="获取每个组元素的数量"><a href="#获取每个组元素的数量" class="headerlink" title="获取每个组元素的数量"></a>获取每个组元素的数量</h3><p>使用<code>size</code>函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(gruoped.size())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">year</span><br><span class="line">1949    12</span><br><span class="line">1950    12</span><br><span class="line">1951    12</span><br><span class="line">1952    12</span><br><span class="line">1953    12</span><br><span class="line">1954    12</span><br><span class="line">1955    12</span><br><span class="line">1956    12</span><br><span class="line">1957    12</span><br><span class="line">1958    12</span><br><span class="line">1959    12</span><br><span class="line">1960    12</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h3 id="获取每个组中每个column的元素数量"><a href="#获取每个组中每个column的元素数量" class="headerlink" title="获取每个组中每个column的元素数量"></a>获取每个组中每个column的元素数量</h3><p>使用<code>count</code>函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(grouped.count())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">      month  passengers</span><br><span class="line">year</span><br><span class="line">1949     12          12</span><br><span class="line">1950     12          12</span><br><span class="line">1951     12          12</span><br><span class="line">1952     12          12</span><br><span class="line">1953     12          12</span><br><span class="line">1954     12          12</span><br><span class="line">1955     12          12</span><br><span class="line">1956     12          12</span><br><span class="line">1957     12          12</span><br><span class="line">1958     12          12</span><br><span class="line">1959     12          12</span><br><span class="line">1960     12          12</span><br></pre></td></tr></table></figure></p><h3 id="获取指定组名的组的数据"><a href="#获取指定组名的组的数据" class="headerlink" title="获取指定组名的组的数据"></a>获取指定组名的组的数据</h3><p>使用<code>get_group</code>函数，参数为组的名字。因为这里的<code>year</code>是整型数据，故代入整数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(grouped.get_group(1950))</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    year      month  passengers</span><br><span class="line">12  1950    January         115</span><br><span class="line">13  1950   February         126</span><br><span class="line">14  1950      March         141</span><br><span class="line">15  1950      April         135</span><br><span class="line">16  1950        May         125</span><br><span class="line">17  1950       June         149</span><br><span class="line">18  1950       July         170</span><br><span class="line">19  1950     August         170</span><br><span class="line">20  1950  September         158</span><br><span class="line">21  1950    October         133</span><br><span class="line">22  1950   November         114</span><br><span class="line">23  1950   December         140</span><br></pre></td></tr></table></figure></p><h3 id="获取每个组中前两个个元素"><a href="#获取每个组中前两个个元素" class="headerlink" title="获取每个组中前两个个元素"></a>获取每个组中前两个个元素</h3><p>使用<code>head</code>函数，参数为元素数量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(grouped.head(2))</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">     year     month  passengers</span><br><span class="line">0    1949   January         112</span><br><span class="line">1    1949  February         118</span><br><span class="line">12   1950   January         115</span><br><span class="line">13   1950  February         126</span><br><span class="line">24   1951   January         145</span><br><span class="line">25   1951  February         150</span><br><span class="line">36   1952   January         171</span><br><span class="line">37   1952  February         180</span><br><span class="line">48   1953   January         196</span><br><span class="line">49   1953  February         196</span><br><span class="line">60   1954   January         204</span><br><span class="line">61   1954  February         188</span><br><span class="line">72   1955   January         242</span><br><span class="line">73   1955  February         233</span><br><span class="line">84   1956   January         284</span><br><span class="line">85   1956  February         277</span><br><span class="line">96   1957   January         315</span><br><span class="line">97   1957  February         301</span><br><span class="line">108  1958   January         340</span><br><span class="line">109  1958  February         318</span><br><span class="line">120  1959   January         360</span><br><span class="line">121  1959  February         342</span><br><span class="line">132  1960   January         417</span><br><span class="line">133  1960  February         391</span><br></pre></td></tr></table></figure></p><h3 id="获取每个组的第3行数据"><a href="#获取每个组的第3行数据" class="headerlink" title="获取每个组的第3行数据"></a>获取每个组的第3行数据</h3><p>使用<code>nth</code>函数，参数为行号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(grouped.nth(3))</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">      month  passengers</span><br><span class="line">year</span><br><span class="line">1949  April         129</span><br><span class="line">1950  April         135</span><br><span class="line">1951  April         163</span><br><span class="line">1952  April         181</span><br><span class="line">1953  April         235</span><br><span class="line">1954  April         227</span><br><span class="line">1955  April         269</span><br><span class="line">1956  April         313</span><br><span class="line">1957  April         348</span><br><span class="line">1958  April         348</span><br><span class="line">1959  April         396</span><br><span class="line">1960  April         461</span><br></pre></td></tr></table></figure></p><h3 id="根据多个column分组"><a href="#根据多个column分组" class="headerlink" title="根据多个column分组*"></a>根据多个column分组*</h3><p>根据两个column分组，传入column名字列表(list)。并用前面的<code>print_groups</code>函数打印组信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mcg = flight_df.groupby([&apos;year&apos;, &apos;month&apos;])</span><br><span class="line">print_groups(mcg)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">(1949, &apos;April&apos;)</span><br><span class="line">   year  month  passengers</span><br><span class="line">3  1949  April         129</span><br><span class="line">(1949, &apos;August&apos;)</span><br><span class="line">   year   month  passengers</span><br><span class="line">7  1949  August         148</span><br><span class="line">(1949, &apos;December&apos;)</span><br><span class="line">    year     month  passengers</span><br><span class="line">11  1949  December         118</span><br><span class="line">(1949, &apos;February&apos;)</span><br><span class="line">   year     month  passengers</span><br><span class="line">1  1949  February         118</span><br><span class="line">(1949, &apos;January&apos;)</span><br><span class="line">   year    month  passengers</span><br><span class="line">0  1949  January         112</span><br><span class="line">(1949, &apos;July&apos;)</span><br><span class="line">   year month  passengers</span><br><span class="line">6  1949  July         148</span><br><span class="line">(1949, &apos;June&apos;)</span><br><span class="line">   year month  passengers</span><br><span class="line"></span><br><span class="line">··· ···</span><br><span class="line"></span><br><span class="line">138  1960  July         622</span><br><span class="line">(1960, &apos;June&apos;)</span><br><span class="line">     year month  passengers</span><br><span class="line">137  1960  June         535</span><br><span class="line">(1960, &apos;March&apos;)</span><br><span class="line">     year  month  passengers</span><br><span class="line">134  1960  March         419</span><br><span class="line">(1960, &apos;May&apos;)</span><br><span class="line">     year month  passengers</span><br><span class="line">136  1960   May         472</span><br><span class="line">(1960, &apos;November&apos;)</span><br><span class="line">     year     month  passengers</span><br><span class="line">142  1960  November         390</span><br><span class="line">(1960, &apos;October&apos;)</span><br><span class="line">     year    month  passengers</span><br><span class="line">141  1960  October         461</span><br><span class="line">(1960, &apos;September&apos;)</span><br><span class="line">     year      month  passengers</span><br><span class="line">140  1960  September         508</span><br></pre></td></tr></table></figure></p><h3 id="获取每个组的描述性统计变量"><a href="#获取每个组的描述性统计变量" class="headerlink" title="获取每个组的描述性统计变量"></a>获取每个组的描述性统计变量</h3><p>使用<code>describe</code>函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(mcg.describe())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">               passengers</span><br><span class="line">                    count   mean std    min    25%    50%    75%    max</span><br><span class="line">year month</span><br><span class="line">1949 April            1.0  129.0 NaN  129.0  129.0  129.0  129.0  129.0</span><br><span class="line">     August           1.0  148.0 NaN  148.0  148.0  148.0  148.0  148.0</span><br><span class="line">     December         1.0  118.0 NaN  118.0  118.0  118.0  118.0  118.0</span><br><span class="line">     February         1.0  118.0 NaN  118.0  118.0  118.0  118.0  118.0</span><br><span class="line">     January          1.0  112.0 NaN  112.0  112.0  112.0  112.0  112.0</span><br><span class="line">...                   ...    ...  ..    ...    ...    ...    ...    ...</span><br><span class="line">1960 March            1.0  419.0 NaN  419.0  419.0  419.0  419.0  419.0</span><br><span class="line">     May              1.0  472.0 NaN  472.0  472.0  472.0  472.0  472.0</span><br><span class="line">     November         1.0  390.0 NaN  390.0  390.0  390.0  390.0  390.0</span><br><span class="line">     October          1.0  461.0 NaN  461.0  461.0  461.0  461.0  461.0</span><br><span class="line">     September        1.0  508.0 NaN  508.0  508.0  508.0  508.0  508.0</span><br><span class="line"></span><br><span class="line">[144 rows x 8 columns]</span><br></pre></td></tr></table></figure></p><p>分析结果可知，每个组仅有一行数据</p><h2 id="使用等级制的索引分组"><a href="#使用等级制的索引分组" class="headerlink" title="使用等级制的索引分组"></a>使用等级制的索引分组</h2><p>创建一个原数据的浅复制，使用<code>copy</code>函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mi = flight_df.copy()</span><br></pre></td></tr></table></figure></p><h3 id="使用set-index函数"><a href="#使用set-index函数" class="headerlink" title="使用set_index函数"></a>使用<code>set_index</code>函数</h3><p>参数为column名字列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mi = mi.set_index([&apos;year&apos;, &apos;month&apos;])</span><br><span class="line">print(mi)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">                passengers</span><br><span class="line">year month</span><br><span class="line">1949 January           112</span><br><span class="line">     February          118</span><br><span class="line">     March             132</span><br><span class="line">     April             129</span><br><span class="line">     May               121</span><br><span class="line">...                    ...</span><br><span class="line">1960 August            606</span><br><span class="line">     September         508</span><br><span class="line">     October           461</span><br><span class="line">     November          390</span><br><span class="line">     December          432</span><br><span class="line"></span><br><span class="line">[144 rows x 1 columns]</span><br></pre></td></tr></table></figure></p><h3 id="使用第一个等级的索引分组"><a href="#使用第一个等级的索引分组" class="headerlink" title="使用第一个等级的索引分组"></a>使用第一个等级的索引分组</h3><p>使用了<code>groupby</code>函数中的<code>level</code>参数，类型为int型。最后使用<code>print_groups</code>函数输出组详情。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mig_11 = mi.groupby(level=0)</span><br><span class="line">print_groups(mig_11)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">1949</span><br><span class="line">                passengers</span><br><span class="line">year month</span><br><span class="line">1949 January           112</span><br><span class="line">     February          118</span><br><span class="line">     March             132</span><br><span class="line">     April             129</span><br><span class="line">     May               121</span><br><span class="line">     June              135</span><br><span class="line">     July              148</span><br><span class="line">     August            148</span><br><span class="line">     September         136</span><br><span class="line">     October           119</span><br><span class="line">     November          104</span><br><span class="line">     December          118</span><br><span class="line">1950</span><br><span class="line">                passengers</span><br><span class="line">year month</span><br><span class="line">1950 January           115</span><br><span class="line">     February          126</span><br><span class="line">     March             141</span><br><span class="line">     April             135</span><br><span class="line">     May               125</span><br><span class="line">     June              149</span><br><span class="line">     July              170</span><br><span class="line">     August            170</span><br><span class="line">     September         158</span><br><span class="line">     October           133</span><br><span class="line">     November          114</span><br><span class="line">     December          140</span><br><span class="line"></span><br><span class="line">··· ···</span><br><span class="line"></span><br><span class="line">1959</span><br><span class="line">                passengers</span><br><span class="line">year month</span><br><span class="line">1959 January           360</span><br><span class="line">     February          342</span><br><span class="line">     March             406</span><br><span class="line">     April             396</span><br><span class="line">     May               420</span><br><span class="line">     June              472</span><br><span class="line">     July              548</span><br><span class="line">     August            559</span><br><span class="line">     September         463</span><br><span class="line">     October           407</span><br><span class="line">     November          362</span><br><span class="line">     December          405</span><br><span class="line">1960</span><br><span class="line">                passengers</span><br><span class="line">year month</span><br><span class="line">1960 January           417</span><br><span class="line">     February          391</span><br><span class="line">     March             419</span><br><span class="line">     April             461</span><br><span class="line">     May               472</span><br><span class="line">     June              535</span><br><span class="line">     July              622</span><br><span class="line">     August            606</span><br><span class="line">     September         508</span><br><span class="line">     October           461</span><br><span class="line">     November          390</span><br><span class="line">     December          432</span><br></pre></td></tr></table></figure></p><h3 id="使用多个等级的索引分组"><a href="#使用多个等级的索引分组" class="headerlink" title="使用多个等级的索引分组"></a>使用多个等级的索引分组</h3><p>向<code>level</code>参数赋值索引列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mig_12 = mi.groupby(level=[&apos;year&apos;, &apos;month&apos;])</span><br><span class="line">print_groups(mig_12)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(1949, &apos;April&apos;)</span><br><span class="line">            passengers</span><br><span class="line">year month</span><br><span class="line">1949 April         129</span><br><span class="line">(1949, &apos;August&apos;)</span><br><span class="line">             passengers</span><br><span class="line">year month</span><br><span class="line">1949 August         148</span><br><span class="line">(1949, &apos;December&apos;)</span><br><span class="line">               passengers</span><br><span class="line">year month</span><br><span class="line">1949 December         118</span><br><span class="line">(1949, &apos;February&apos;)</span><br><span class="line">               passengers</span><br><span class="line">year month</span><br><span class="line">1949 February         118</span><br><span class="line"></span><br><span class="line">··· ···</span><br><span class="line"></span><br><span class="line">(1960, &apos;November&apos;)</span><br><span class="line">               passengers</span><br><span class="line">year month</span><br><span class="line">1960 November         390</span><br><span class="line">(1960, &apos;October&apos;)</span><br><span class="line">              passengers</span><br><span class="line">year month</span><br><span class="line">1960 October         461</span><br><span class="line">(1960, &apos;September&apos;)</span><br><span class="line">                passengers</span><br><span class="line">year month</span><br><span class="line">1960 September         508</span><br></pre></td></tr></table></figure></p><h2 id="使用聚合函数agg：参数为函数名"><a href="#使用聚合函数agg：参数为函数名" class="headerlink" title="使用聚合函数agg：参数为函数名"></a>使用聚合函数<code>agg</code>：参数为函数名</h2><h3 id="计算组的平均值"><a href="#计算组的平均值" class="headerlink" title="计算组的平均值"></a>计算组的平均值</h3><p>传入<code>np.mean</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(mig_12.agg(np.mean))</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">                passengers</span><br><span class="line">year month</span><br><span class="line">1949 April             129</span><br><span class="line">     August            148</span><br><span class="line">     December          118</span><br><span class="line">     February          118</span><br><span class="line">     January           112</span><br><span class="line">...                    ...</span><br><span class="line">1960 March             419</span><br><span class="line">     May               472</span><br><span class="line">     November          390</span><br><span class="line">     October           461</span><br><span class="line">     September         508</span><br><span class="line"></span><br><span class="line">[144 rows x 1 columns]</span><br></pre></td></tr></table></figure></p><p>不创建索引，使用<code>groupby</code>函数的<code>as_index</code>参数(设置为<code>False</code>，创建索引设置为<code>True</code>)，类型为布尔型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = flight_df.groupby([&apos;year&apos;, &apos;month&apos;], as_index=False).agg(np.mean)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">     year      month  passengers</span><br><span class="line">0    1949      April         129</span><br><span class="line">1    1949     August         148</span><br><span class="line">2    1949   December         118</span><br><span class="line">3    1949   February         118</span><br><span class="line">4    1949    January         112</span><br><span class="line">..    ...        ...         ...</span><br><span class="line">139  1960      March         419</span><br><span class="line">140  1960        May         472</span><br><span class="line">141  1960   November         390</span><br><span class="line">142  1960    October         461</span><br><span class="line">143  1960  September         508</span><br><span class="line"></span><br><span class="line">[144 rows x 3 columns]</span><br></pre></td></tr></table></figure></p><h3 id="一次使用多个函数"><a href="#一次使用多个函数" class="headerlink" title="一次使用多个函数"></a>一次使用多个函数</h3><p>向参数<code>as_index</code>传入函数名列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(mig_12.agg([np.mean, np.std]))</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">               passengers</span><br><span class="line">                     mean std</span><br><span class="line">year month</span><br><span class="line">1949 April            129 NaN</span><br><span class="line">     August           148 NaN</span><br><span class="line">     December         118 NaN</span><br><span class="line">     February         118 NaN</span><br><span class="line">     January          112 NaN</span><br><span class="line">...                   ...  ..</span><br><span class="line">1960 March            419 NaN</span><br><span class="line">     May              472 NaN</span><br><span class="line">     November         390 NaN</span><br><span class="line">     October          461 NaN</span><br><span class="line">     September        508 NaN</span><br><span class="line"></span><br><span class="line">[144 rows x 2 columns]</span><br></pre></td></tr></table></figure></p><h3 id="对不同的column应用不同的函数"><a href="#对不同的column应用不同的函数" class="headerlink" title="对不同的column应用不同的函数"></a>对不同的column应用不同的函数</h3><p>通过对<code>as_index</code>参数传入字典(dict)实现，字典键(key)为column名，值(value)为函数名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = mig_12.agg(&#123;&apos;passengers&apos;: np.mean&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">                passengers</span><br><span class="line">year month</span><br><span class="line">1949 April             129</span><br><span class="line">     August            148</span><br><span class="line">     December          118</span><br><span class="line">     February          118</span><br><span class="line">     January           112</span><br><span class="line">...                    ...</span><br><span class="line">1960 March             419</span><br><span class="line">     May               472</span><br><span class="line">     November          390</span><br><span class="line">     October           461</span><br><span class="line">     September         508</span><br><span class="line"></span><br><span class="line">[144 rows x 1 columns]</span><br></pre></td></tr></table></figure></p><h3 id="只对指定的column应用函数"><a href="#只对指定的column应用函数" class="headerlink" title="只对指定的column应用函数"></a>只对指定的column应用函数</h3><p>对分组对象使用[ ]运算符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(mig_12[&apos;passengers&apos;].mean())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">year  month</span><br><span class="line">1949  April        129</span><br><span class="line">      August       148</span><br><span class="line">      December     118</span><br><span class="line">      February     118</span><br><span class="line">      January      112</span><br><span class="line">                  ...</span><br><span class="line">1960  March        419</span><br><span class="line">      May          472</span><br><span class="line">      November     390</span><br><span class="line">      October      461</span><br><span class="line">      September    508</span><br><span class="line">Name: passengers, Length: 144, dtype: int64</span><br></pre></td></tr></table></figure></p><p>返回的是一个<code>Series</code>对象</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导入必要的库&quot;&gt;&lt;a href=&quot;#导入必要的库&quot; class=&quot;headerlink&quot; title=&quot;导入必要的库&quot;&gt;&lt;/a&gt;导入必要的库&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import numpy as np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import pandas as pd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;导入数据集&quot;&gt;&lt;a href=&quot;#导入数据集&quot; class=&quot;headerlink&quot; title=&quot;导入数据集&quot;&gt;&lt;/a&gt;导入数据集&lt;/h2&gt;&lt;p&gt;我下载了seaborn中的&lt;a href=&quot;https://github.com/mwaskom/seaborn-data&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据集&lt;/a&gt;(都是小型的数据集)，选择了其中的航班数据集&lt;code&gt;flight.csv&lt;/code&gt;，并放入了本地seaborn_dataset文件夹(该文件夹放在项目根目录)中&lt;br&gt;导入flight数据集(使用&lt;code&gt;read_csv&lt;/code&gt;函数)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flight_df = pd.read_csv(&amp;apos;seaborn_dataset/flights.csv&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python数据分析" scheme="http://www.skecis.top/categories/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="http://www.skecis.top/tags/Python/"/>
    
      <category term="数据分析" scheme="http://www.skecis.top/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫实践:下载壁纸</title>
    <link href="http://www.skecis.top/2019/11/02/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/"/>
    <id>http://www.skecis.top/2019/11/02/python爬虫教程/</id>
    <published>2019-11-02T12:02:32.000Z</published>
    <updated>2019-11-02T13:04:26.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入必要的包-package"><a href="#导入必要的包-package" class="headerlink" title="导入必要的包(package)"></a>导入必要的包(package)</h2><p>若没有下列的包，可使用<code>pip install 包名</code>命令安装</p><ul><li>re: 使用正则表达式</li><li>requests: 向网站发出请求</li><li>bs4: 解析网页内容</li><li>time: 计算时间</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br></pre></td></tr></table></figure><h2 id="任务要求-批量下载某网站的壁纸"><a href="#任务要求-批量下载某网站的壁纸" class="headerlink" title="任务要求: 批量下载某网站的壁纸"></a>任务要求: 批量下载某网站的壁纸</h2><h3 id="访问壁纸网站"><a href="#访问壁纸网站" class="headerlink" title="访问壁纸网站"></a>访问壁纸网站</h3><p>我选择的是壁纸质量高的wallpapers home<a href="https://wallpapershome.com" target="_blank" rel="noopener">点击此处访问</a>，网站主页如下<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E7%88%AC%E8%99%AB/1_1.png" alt></p><h3 id="寻找关键页面"><a href="#寻找关键页面" class="headerlink" title="寻找关键页面"></a>寻找关键页面</h3><p>点击主页上的<a href="https://wallpapershome.com/?page=1" target="_blank" rel="noopener">View All Wallpapers</a>注意网址变化<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E7%88%AC%E8%99%AB/1_2.png" alt><br>目标页面，出现了参数<code>page=1</code>，<strong>每个页面有12张壁纸信息</strong><br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E7%88%AC%E8%99%AB/1_3.png" alt></p><h3 id="查看页面请求头"><a href="#查看页面请求头" class="headerlink" title="查看页面请求头"></a>查看页面请求头</h3><p>寻找<code>Host</code>信息和<code>Headers</code>信息，使用开发者工具操作，如下<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E7%88%AC%E8%99%AB/1_7.png" alt></p><h3 id="定位壁纸信息"><a href="#定位壁纸信息" class="headerlink" title="定位壁纸信息"></a>定位壁纸信息</h3><p>选择元素，找到图片的准确信息，操作步骤如下图<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E7%88%AC%E8%99%AB/1_4.png" alt></p><h3 id="找到壁纸信息"><a href="#找到壁纸信息" class="headerlink" title="找到壁纸信息"></a>找到壁纸信息</h3><p>壁纸所在的<code>div</code>标签的类名为<code>class=pics</code><br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E7%88%AC%E8%99%AB/1_5.png" alt></p><h3 id="准确定位壁纸的地址"><a href="#准确定位壁纸的地址" class="headerlink" title="准确定位壁纸的地址"></a>准确定位壁纸的地址</h3><p>在上述页面中点击任意一张壁纸，会出现新页面，在新页面中将鼠标移至<code>Download</code>处，选择分辨率<code>1920x1080</code>，浏览器左下角将会出现壁纸的地址信息如下<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E7%88%AC%E8%99%AB/1_6.png" alt></p><h2 id="任务分析"><a href="#任务分析" class="headerlink" title="任务分析"></a>任务分析</h2><h3 id="定制请求头和初始变量"><a href="#定制请求头和初始变量" class="headerlink" title="定制请求头和初始变量"></a>定制请求头和初始变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36&apos;,</span><br><span class="line">    &apos;Host&apos;: &apos;wallpapershome.com&apos;</span><br><span class="line">&#125;</span><br><span class="line">size = &apos;1920x1080&apos;  # 分辨率</span><br><span class="line">save_path = &apos;wallpapers_src/&apos;  # 本地存储地址</span><br><span class="line">start = time.time()  # 程序开始时刻</span><br></pre></td></tr></table></figure><h3 id="目标网页的网址规律"><a href="#目标网页的网址规律" class="headerlink" title="目标网页的网址规律"></a>目标网页的网址规律</h3><p>因为不仅仅抓取一个页面的壁纸，故可利用<code>page</code>参数设置请求地址，查看页面数量可知一共有1502张页面，故可如下操作即可访问每个页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1502):</span><br><span class="line">    wallpaper_name = []  # 存储每张页面的壁纸名字</span><br><span class="line">    url = &quot;https://wallpapershome.com/?page=&quot; + str(i+1)</span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    print(&quot;状态响应码:&quot;, r.status_code)</span><br></pre></td></tr></table></figure></p><h3 id="解析壁纸的地址信息"><a href="#解析壁纸的地址信息" class="headerlink" title="解析壁纸的地址信息"></a>解析壁纸的地址信息</h3><p>通过先前的壁纸的地址信息分析可知，每张壁纸存贮在地址<code>https://wallpapershome.com/images/wallpapers/</code>下，壁纸格式形如<code>分类-分辨率-清晰度-名字.jpg</code>，故利用获取到的壁纸名，再通过设定分辨率，组合可得到壁纸地址<br>创建一个处理壁纸名的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def handle_name(line):</span><br><span class="line">    sep = &apos;-&apos;</span><br><span class="line">    m = re.match(&apos;(.*)/(.*).html$&apos;, line)</span><br><span class="line">    name = m.group(2)</span><br><span class="line">    name = name.split(&apos;-&apos;)</span><br><span class="line">    name.insert(-2, size)</span><br><span class="line">    name = sep.join(name)</span><br><span class="line">    return name</span><br></pre></td></tr></table></figure></p><p>再获取每页12张壁纸全名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(r.content, &apos;lxml&apos;)</span><br><span class="line">wallpaper_list = soup.find(&apos;div&apos;, class_=&apos;pics&apos;)</span><br><span class="line">for j in range(12):</span><br><span class="line">    wallpaper_name.append(handle_name(wallpaper_list.contents[j].a.get(&apos;href&apos;)))</span><br></pre></td></tr></table></figure></p><h3 id="辅助信息"><a href="#辅助信息" class="headerlink" title="辅助信息"></a>辅助信息</h3><p>检测运行状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;正在下载第&quot; + str(i+1) + &quot;个页面&quot;)</span><br><span class="line">cost = time.time() - start</span><br><span class="line">print(&quot;已运行时间:&quot; + str(cost) + &apos;秒&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="下载每张壁纸"><a href="#下载每张壁纸" class="headerlink" title="下载每张壁纸"></a>下载每张壁纸</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for j in range(12):</span><br><span class="line">    src_url = &apos;https://wallpapershome.com/images/wallpapers/&apos; + wallpaper_name[j] + &apos;.jpg&apos;</span><br><span class="line">    with open(save_path+wallpaper_name[j]+&apos;.jpg&apos;, &apos;wb&apos;) as f:</span><br><span class="line">        img = requests.get(src_url).content</span><br><span class="line">        f.write(img)</span><br><span class="line">        print(&apos;+&apos;, end=&apos;&apos;)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><h2 id="运行效果如下"><a href="#运行效果如下" class="headerlink" title="运行效果如下"></a>运行效果如下</h2><p>可能因为是国外网站的原因，下载速度慢得… -.-  部分运行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">状态响应码: 200</span><br><span class="line">正在下载第69个页面</span><br><span class="line">已运行时间:3.5130293369293213秒</span><br><span class="line">++++++++++++</span><br><span class="line"></span><br><span class="line">状态响应码: 200</span><br><span class="line">正在下载第70个页面</span><br><span class="line">已运行时间:85.50803112983704秒</span><br><span class="line">++</span><br></pre></td></tr></table></figure></p><h3 id="大量精美壁纸-free-收入囊中"><a href="#大量精美壁纸-free-收入囊中" class="headerlink" title="大量精美壁纸(free)收入囊中"></a>大量精美壁纸(free)收入囊中</h3><p>岂不美哉，妈妈再也不用担心我没有壁纸换了(手动滑稽)<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E7%88%AC%E8%99%AB/1_8.png" alt></p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/SkecisAI/python-project/blob/master/get_wallpapers.py" target="_blank" rel="noopener">点击此处访问</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导入必要的包-package&quot;&gt;&lt;a href=&quot;#导入必要的包-package&quot; class=&quot;headerlink&quot; title=&quot;导入必要的包(package)&quot;&gt;&lt;/a&gt;导入必要的包(package)&lt;/h2&gt;&lt;p&gt;若没有下列的包，可使用&lt;code&gt;pip install 包名&lt;/code&gt;命令安装&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;re: 使用正则表达式&lt;/li&gt;
&lt;li&gt;requests: 向网站发出请求&lt;/li&gt;
&lt;li&gt;bs4: 解析网页内容&lt;/li&gt;
&lt;li&gt;time: 计算时间&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python爬虫" scheme="http://www.skecis.top/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://www.skecis.top/tags/Python/"/>
    
      <category term="爬虫" scheme="http://www.skecis.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>用python实现线性链表</title>
    <link href="http://www.skecis.top/2019/11/01/python%E9%93%BE%E8%A1%A8/"/>
    <id>http://www.skecis.top/2019/11/01/python链表/</id>
    <published>2019-11-01T10:48:26.000Z</published>
    <updated>2019-11-01T13:17:41.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性链表概览"><a href="#线性链表概览" class="headerlink" title="线性链表概览"></a>线性链表概览</h2><h3 id="单节点链表"><a href="#单节点链表" class="headerlink" title="单节点链表"></a>单节点链表</h3><p>头指针和尾指针为同一节点，<strong>尾指针中的指针域为空(None)</strong><br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E9%93%BE%E8%A1%A8/1_1.png" alt></p><h3 id="一般链表"><a href="#一般链表" class="headerlink" title="一般链表"></a>一般链表</h3><p><strong>尾指针中的指针域为空(None)</strong><br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E9%93%BE%E8%A1%A8/1_2.png" alt></p><a id="more"></a><h2 id="链表基本数据结构"><a href="#链表基本数据结构" class="headerlink" title="链表基本数据结构"></a>链表基本数据结构</h2><h3 id="链表基本单元：节点-Node"><a href="#链表基本单元：节点-Node" class="headerlink" title="链表基本单元：节点(Node)"></a>链表基本单元：节点(Node)</h3><p>创建<code>Node</code>类</p><ul><li>值域</li><li>指针域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    the basic element of a linked list</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, val, pnext):</span><br><span class="line">        self.value = val</span><br><span class="line">        self.pnext = pnext</span><br></pre></td></tr></table></figure><h3 id="链表类"><a href="#链表类" class="headerlink" title="链表类"></a>链表类</h3><p>创建<code>LinkedList</code>类</p><ul><li>head: 头指针</li><li>tail: 尾指针</li><li>length: 链表长度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class LinkedList:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    a linked list object</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.head = None</span><br><span class="line">        self.tail = self.head</span><br><span class="line">        self.length = 0</span><br></pre></td></tr></table></figure><h2 id="链表操作函数"><a href="#链表操作函数" class="headerlink" title="链表操作函数"></a>链表操作函数</h2><p><code>self</code>参数为对象本身，类似于C++中的<code>this</code>指针</p><h3 id="向链表中插入节点"><a href="#向链表中插入节点" class="headerlink" title="向链表中插入节点"></a>向链表中插入节点</h3><p>创建<code>insert_value</code>函数</p><ul><li>val: 节点值域</li><li>loc: 节点位置，默认为None</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">def insert_value(self, val, loc=None):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    insert node to the list</span><br><span class="line">    :param val: insert value</span><br><span class="line">    :param loc: insert with index</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if self.list_empty():</span><br><span class="line">        # if the list is empty</span><br><span class="line">        self.head = Node(val, None)</span><br><span class="line">        self.tail = self.head</span><br><span class="line">        self.length = 1</span><br><span class="line">    else:</span><br><span class="line">        if (not loc) | (loc == self.length):</span><br><span class="line">            # if insert element without location or at the tail</span><br><span class="line">            new_node = Node(val, None)</span><br><span class="line">            self.tail.pnext = new_node</span><br><span class="line">            self.tail = new_node</span><br><span class="line">            self.length += 1</span><br><span class="line">        else:</span><br><span class="line">            new_node = Node(val, None)</span><br><span class="line">            last_node = self.head</span><br><span class="line">            for index in range(self.length):</span><br><span class="line">                if index == (loc - 1) - 1:</span><br><span class="line">                    break</span><br><span class="line">                else:</span><br><span class="line">                    last_node = last_node.pnext</span><br><span class="line">            next_node = last_node.pnext</span><br><span class="line">            last_node.pnext = new_node</span><br><span class="line">            new_node.pnext = next_node</span><br><span class="line">            self.length += 1</span><br></pre></td></tr></table></figure><h3 id="删除链表中的节点"><a href="#删除链表中的节点" class="headerlink" title="删除链表中的节点"></a>删除链表中的节点</h3><p>创建<code>delete_value</code>函数</p><ul><li>loc: 删除的节点位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def delete_value(self, loc=None):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    delete value from list</span><br><span class="line">    :param loc: the location of list</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if not self.list_empty():</span><br><span class="line">        if loc:</span><br><span class="line">            last_node = self.head</span><br><span class="line">            for index in range(self.length):</span><br><span class="line">                if index == (loc - 1) - 1:</span><br><span class="line">                    break</span><br><span class="line">                else:</span><br><span class="line">                    last_node = last_node.pnext</span><br><span class="line">            next_node = last_node.pnext.pnext</span><br><span class="line">            last_node.pnext = next_node</span><br><span class="line">        else:</span><br><span class="line">            now_node = self.head</span><br><span class="line">            while now_node:</span><br><span class="line">                if now_node.pnext.pnext is None:</span><br><span class="line">                    now_node.pnext = None</span><br><span class="line">                    break</span><br><span class="line">                else:</span><br><span class="line">                    now_node = now_node.pnext</span><br></pre></td></tr></table></figure><h3 id="判断链表是否为空"><a href="#判断链表是否为空" class="headerlink" title="判断链表是否为空"></a>判断链表是否为空</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def list_empty(self):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if the list is empty</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if self.head is None:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure><h3 id="打印链表内容"><a href="#打印链表内容" class="headerlink" title="打印链表内容"></a>打印链表内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def list_traverse(self):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    visit all elements of the list</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if not self.list_empty():</span><br><span class="line">        now_node = self.head</span><br><span class="line">        print(&apos;-&apos;*15)</span><br><span class="line">        while now_node:</span><br><span class="line">            print(&quot;value: &quot;, now_node.value)</span><br><span class="line">            now_node = now_node.pnext</span><br></pre></td></tr></table></figure><h2 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h2><p>创建程序入口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    my_linkedlist = LinkedList()</span><br><span class="line">    for i in range(5):</span><br><span class="line">        my_linkedlist.insert_value(i)</span><br><span class="line">    my_linkedlist.list_traverse()</span><br><span class="line">    my_linkedlist.insert_value([&apos;this&apos;, &apos;is&apos;, &apos;a&apos;, &apos;list&apos;], 3)</span><br><span class="line">    my_linkedlist.list_traverse()</span><br><span class="line">    my_linkedlist.delete_value(2)</span><br><span class="line">    my_linkedlist.list_traverse()</span><br></pre></td></tr></table></figure></p><p>运行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---------------</span><br><span class="line">value:  0</span><br><span class="line">value:  1</span><br><span class="line">value:  2</span><br><span class="line">value:  3</span><br><span class="line">value:  4</span><br><span class="line">---------------</span><br><span class="line">value:  0</span><br><span class="line">value:  1</span><br><span class="line">value:  [&apos;this&apos;, &apos;is&apos;, &apos;a&apos;, &apos;list&apos;]</span><br><span class="line">value:  2</span><br><span class="line">value:  3</span><br><span class="line">value:  4</span><br><span class="line">---------------</span><br><span class="line">value:  0</span><br><span class="line">value:  [&apos;this&apos;, &apos;is&apos;, &apos;a&apos;, &apos;list&apos;]</span><br><span class="line">value:  2</span><br><span class="line">value:  3</span><br><span class="line">value:  4</span><br></pre></td></tr></table></figure></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/SkecisAI/python-DS/blob/master/linked_list.py" target="_blank" rel="noopener">点击此处访问</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线性链表概览&quot;&gt;&lt;a href=&quot;#线性链表概览&quot; class=&quot;headerlink&quot; title=&quot;线性链表概览&quot;&gt;&lt;/a&gt;线性链表概览&lt;/h2&gt;&lt;h3 id=&quot;单节点链表&quot;&gt;&lt;a href=&quot;#单节点链表&quot; class=&quot;headerlink&quot; title=&quot;单节点链表&quot;&gt;&lt;/a&gt;单节点链表&lt;/h3&gt;&lt;p&gt;头指针和尾指针为同一节点，&lt;strong&gt;尾指针中的指针域为空(None)&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E9%93%BE%E8%A1%A8/1_1.png&quot; alt&gt;&lt;/p&gt;&lt;h3 id=&quot;一般链表&quot;&gt;&lt;a href=&quot;#一般链表&quot; class=&quot;headerlink&quot; title=&quot;一般链表&quot;&gt;&lt;/a&gt;一般链表&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;尾指针中的指针域为空(None)&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/python%E9%93%BE%E8%A1%A8/1_2.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="http://www.skecis.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Python" scheme="http://www.skecis.top/tags/Python/"/>
    
      <category term="链表" scheme="http://www.skecis.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>CFPS数据分析案例</title>
    <link href="http://www.skecis.top/2019/10/24/CFPS%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/"/>
    <id>http://www.skecis.top/2019/10/24/CFPS数据分析案例/</id>
    <published>2019-10-24T12:24:49.000Z</published>
    <updated>2019-10-24T15:14:12.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文献引用"><a href="#文献引用" class="headerlink" title="文献引用"></a>文献引用</h2><p><a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2018&amp;filename=ZGQL201712007&amp;uid=WEEvREcwSlJHSldTTEYzU3EydDVHeHMyVC9Rc1FKVFNDOFJmRVM4alNqdz0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;v=MDM1NzVUcldNMUZyQ1VSTE9lWitSckZDbm5WTC9CUHlyYVlyRzRIOWJOclk5Rlk0UjhlWDFMdXhZUzdEaDFUM3E=" target="_blank" rel="noopener"><strong>刘保中.我国城乡家庭教育投入状况的比较研究——基于CFPS(2014)数据的实证分析[J].中国青年研究,2017(12):45-52.</strong></a></p><a id="more"></a><h2 id="文献简要"><a href="#文献简要" class="headerlink" title="文献简要"></a>文献简要</h2><p>使用<strong>CFPS2014</strong>年的数据，在<strong>教育期望、教育支出</strong>和<strong>教育参与</strong>三个维度上对当前我国城乡家庭教育投入状况进行了比较分析，详细摘要内容如下:<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/cfps%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1_1.png" alt></p><h2 id="数据处理-Python"><a href="#数据处理-Python" class="headerlink" title="数据处理(Python)"></a>数据处理(Python)</h2><h3 id="数据概要"><a href="#数据概要" class="headerlink" title="数据概要"></a>数据概要</h3><p>该文献使用的是cfps2014年的数据，且着重使用的是<strong>儿童数据</strong>，文献中的数据部分摘要如下：<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/cfps%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1_2.png" alt></p><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>导入必要的包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import statsmodels.api as sm</span><br><span class="line">from pandas.io.stata import StataReader</span><br></pre></td></tr></table></figure></p><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><p>导入了儿童数据和家庭数据(均为stata文件)，使用StataReader函数读入该类型文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">child_stata = StataReader(&apos;cfps2014child.dta&apos;, convert_categoricals=False)</span><br><span class="line">famecon_stata = StataReader(&apos;cfps2014famecon.dta&apos;, convert_categoricals=False)</span><br></pre></td></tr></table></figure></p><p>上述方式得到的是stata数据，接着将其转化为Pandas中的DataFrame格式，使用read函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">child_df = child_stata.read()</span><br><span class="line">fam_df = famecon_stata.read()</span><br></pre></td></tr></table></figure></p><p>数据概览<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(child_df.head())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">           pid  proxyrpt  ...  cfps2014eduy_im  releaseversion</span><br><span class="line">0  100453401.0       1.0  ...              0.0             2.0</span><br><span class="line">1  103924504.0       1.0  ...              0.0             2.0</span><br><span class="line">2  106561502.0       1.0  ...              0.0             2.0</span><br><span class="line">3  107624502.0       1.0  ...              0.0             2.0</span><br><span class="line">4  110011103.0       1.0  ...              8.0             2.0</span><br></pre></td></tr></table></figure></p><h4 id="变量引入及预处理"><a href="#变量引入及预处理" class="headerlink" title="变量引入及预处理"></a>变量引入及预处理</h4><p>使用的变量及处理方式：父母对孩子的教育期望（分为高等教育期望和非高等教育期望，以及等价转化为教育年限）、家庭全年教育支出、家庭教育课外补习支出、家庭教育参与（共六个变量，程度从低到高划为1-5分）。控制变量：孩子户口（0-农业户口，1-非农业户口）、孩子性别（0-女，1-男），孩子年龄、孩子目前上学阶段（小学及以上）、家庭年收入（取对数）。文献中使用的变量详情（部分划线的变量未引入）：<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/cfps%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1_3.png" alt><br>特征变量详情列表如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">child_col = [&apos;fid14&apos;,  # 14年家庭编码</span><br><span class="line">             &apos;wd2&apos;,  # 家庭教育期望</span><br><span class="line">             &apos;wd503m&apos;, &apos;wd5ckp&apos;, &apos;wd5total_m&apos;, &apos;wd5total&apos;,  # 家庭教育支出： 课外辅导费用，是否确认教育支出，新教育支出，旧教育支出</span><br><span class="line">             &apos;wf601m&apos;, &apos;wf602m&apos;, &apos;wf603m&apos;, &apos;wf604m&apos;, &apos;wf605m&apos;, &apos;wf606m&apos;,  # 家庭教育参与： 频率从低到高（赋值1-5分）</span><br><span class="line">             &apos;wa4&apos;, &apos;cfps2014_age&apos;, &apos;cfps_gender&apos;,  # 控制变量： 户口(1:农, 3:非农)，年龄，性别</span><br><span class="line">             &apos;wf301m&apos;]  # 上哪级学校</span><br><span class="line">family_col = [&apos;fid14&apos;,</span><br><span class="line">              &apos;finc&apos;]  # 家庭年收入</span><br></pre></td></tr></table></figure></p><ol><li><p>使用家庭收入变量连接两表<br>为了在儿童数据中引入家庭数据的收入变量，需根据家庭编码链接两个表，使用join函数，键值设为家庭编码<code>fid14</code>。<strong>特别要注意的是，因为不是每一个儿童在家庭表中的都有年收入这个数据，故连接后无年收入数据的儿童该值将为空，此时抛弃空值。并抛弃不符合要求的数据（-1）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取家庭年收入变量</span><br><span class="line">child_df = child_df.join(fam_df.set_index(&apos;fid14&apos;), on=&apos;fid14&apos;)  # 根据家庭编码链接两个表</span><br><span class="line">child_df = child_df.dropna()</span><br><span class="line">child_df.drop(child_df[child_df[&apos;finc&apos;] &lt; 0].index, inplace=True)</span><br></pre></td></tr></table></figure></li><li><p>处理家庭收入变量<br>进行取对数处理，自定义函数<code>cal_finc</code>进行映射。<br>自定义函数<code>cal_finc</code>如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def cal_finc(finc):</span><br><span class="line">    # 家庭年收入取对数</span><br><span class="line">    if finc == 0:</span><br><span class="line">        return 0</span><br><span class="line">    else:</span><br><span class="line">        return np.log(finc)</span><br></pre></td></tr></table></figure></li></ol><p>将函数映射到数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child_df[&apos;finc&apos;] = child_df[&apos;finc&apos;].map(cal_finc)      # 处理家庭年收入</span><br></pre></td></tr></table></figure></p><ol><li><p>处理户口变量<br>将原来的数据中农业户口和非农业户口映射为0和1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">city_code = &#123;1: 0, 3: 1&#125;  # 户口重新编码</span><br><span class="line">child_df[&apos;wa4&apos;] = child_df[&apos;wa4&apos;].map(city_code)</span><br></pre></td></tr></table></figure></li><li><p>删去不符合条件的数据<br>删去既不是农业户口或非农业户口的，再删去上学阶段不符合要求的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drop_cond = (child_df[&apos;wa4&apos;] &lt; 1) | (child_df[&apos;wa4&apos;] &gt; 3)  # 删去户口不符合要求的</span><br><span class="line">child_df.drop(child_df[drop_cond].index, inplace=True)</span><br><span class="line">drop_cond1 = (child_df[&apos;wf301m&apos;] &lt;= 2)  # 删去上学阶段不符合要求的</span><br><span class="line">child_df.drop(child_df[drop_cond1].index, inplace=True)</span><br></pre></td></tr></table></figure></li></ol><h3 id="处理教育期望"><a href="#处理教育期望" class="headerlink" title="处理教育期望"></a>处理教育期望</h3><ol><li><p>首先删去不符合要求的教育期望样本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop_cond2 = (child_df[&apos;wd2&apos;] &lt; 0)</span><br><span class="line">child_df.drop(child_df[drop_cond2].index, inplace=True)</span><br></pre></td></tr></table></figure></li><li><p>教育期望的分布以及样本量<br>打印出教育期望的分布及样本数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(child_df[&apos;wd2&apos;].value_counts(), &apos;count: &apos;, child_df[&apos;wd2&apos;].count())</span><br></pre></td></tr></table></figure></li></ol><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6.0    2394</span><br><span class="line">4.0     546</span><br><span class="line">8.0     296</span><br><span class="line">5.0     280</span><br><span class="line">7.0     145</span><br><span class="line">3.0      88</span><br><span class="line">2.0      18</span><br><span class="line">9.0       1</span><br><span class="line">Name: wd2, dtype: int64 count:  3768</span><br></pre></td></tr></table></figure></p><ol><li><p>将教育期望映射为两类：1-高等教育期望，0-非高等教育期望</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child_df[&apos;high_edu&apos;] = child_df.apply(lambda row: 1 if row[&apos;wd2&apos;] &gt;= 5 else 0, axis=1)  # 是否为高等教育期望</span><br></pre></td></tr></table></figure></li><li><p>将教育期望映射为教育年限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edu_code = &#123;9: 0, 8: 23, 7: 19, 6: 16, 5: 15, 4: 12, 3: 9, 2: 6&#125;  # 教育期望重新编码</span><br><span class="line">child_df[&apos;wd2_years&apos;] = child_df[&apos;wd2&apos;].map(edu_code)</span><br></pre></td></tr></table></figure></li><li><p>各个教育期望年限和高等教育期望的样本量、均值和百分比</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">village_df = child_df[child_df[&apos;wa4&apos;] == 0]  # 农业户口</span><br><span class="line">city_df = child_df[child_df[&apos;wa4&apos;] == 1]  # 非农业户口</span><br><span class="line">expect_total_mean = child_df[&apos;wd2_years&apos;].mean()</span><br><span class="line">village_expect_mean = village_df[&apos;wd2_years&apos;].mean()</span><br><span class="line">print(&apos;total   city   village&apos;)</span><br><span class="line">print(&apos;count: &apos;, child_df.shape[0], city_df.shape[0], village_df.shape[0])</span><br><span class="line">print(&apos;years_mean: &apos;, expect_total_mean, city_expect_mean, village_expect_mean)</span><br><span class="line">print(&apos;high_edu_percent: &apos;,</span><br><span class="line">      child_df[&apos;high_edu&apos;].value_counts(normalize=True).loc[1]*100,</span><br><span class="line">      city_df[&apos;high_edu&apos;].value_counts(normalize=True).loc[1]*100,</span><br><span class="line">      village_df[&apos;high_edu&apos;].value_counts(normalize=True).loc[1]*100)</span><br></pre></td></tr></table></figure></li></ol><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total   city   village</span><br><span class="line">count:  3768 808 2960</span><br><span class="line">years_mean:  15.795912951167729 16.521039603960396 15.597972972972974</span><br><span class="line">high_edu_percent:  82.6963906581741 93.6881188118812 79.69594594594595</span><br></pre></td></tr></table></figure></p><p>原文中教育期望的数据分布如下：<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/cfps%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1_4.png" alt></p><h3 id="处理教育支出"><a href="#处理教育支出" class="headerlink" title="处理教育支出"></a>处理教育支出</h3><p>课外辅导数据较为正常，不需要处理</p><ol><li><p>获取最终的全年教育支出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child_df[&apos;edu_expense&apos;] = child_df.apply(lambda row: row[&apos;wd5total_m&apos;] if (row[&apos;wd5ckp&apos;] == 1) | (row[&apos;wd5ckp&apos;] == 3) else row[&apos;wd5total&apos;], axis=1)</span><br></pre></td></tr></table></figure></li><li><p>删去不符合条件的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child_df.drop(child_df[child_df[&apos;edu_expense&apos;] &lt; 0].index, inplace=True)</span><br></pre></td></tr></table></figure></li><li><p>各个全年教育指出和课外辅导的样本量、均值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 教育支出: 课外辅导</span><br><span class="line">coach_total_mean = child_df[&apos;wd503m&apos;].mean()</span><br><span class="line">village_coach_mean = village_df[&apos;wd503m&apos;].mean()</span><br><span class="line">city_coach_mean = city_df[&apos;wd503m&apos;].mean()</span><br><span class="line"># 教育支出： 总支出</span><br><span class="line">expense_total_mean = child_df[&apos;edu_expense&apos;].mean()</span><br><span class="line">village_expense_mean = village_df[&apos;edu_expense&apos;].mean()</span><br><span class="line">city_expense_mean = city_df[&apos;edu_expense&apos;].mean()</span><br><span class="line">child_df.to_csv(&apos;2014child.csv&apos;, index=False)</span><br><span class="line">print(&apos;total   city   village&apos;)</span><br><span class="line">print(&apos;count: &apos;, child_df.shape[0], city_df.shape[0], village_df.shape[0])</span><br><span class="line">print(&apos;expense_mean: &apos;, expense_total_mean, city_expense_mean, village_expense_mean)</span><br><span class="line">print(&apos;coach_mean: &apos;, coach_total_mean, city_coach_mean, village_coach_mean)</span><br></pre></td></tr></table></figure></li></ol><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total   city   village</span><br><span class="line">count:  3774 808 2966</span><br><span class="line">expense_mean:  3179.1073131955486 5691.209158415842 2494.7585974376266</span><br><span class="line">coach_mean:  787.992315845257 2657.6992574257424 278.64531355360754</span><br></pre></td></tr></table></figure></p><p>原文中教育支出的数据分布如下：<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/cfps%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1_5.png" alt></p><h3 id="处理教育参与"><a href="#处理教育参与" class="headerlink" title="处理教育参与"></a>处理教育参与</h3><p>教育参与相关变量列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">li = [&apos;wf601m&apos;, &apos;wf602m&apos;, &apos;wf603m&apos;, &apos;wf604m&apos;, &apos;wf605m&apos;, &apos;wf606m&apos;]</span><br></pre></td></tr></table></figure></p><ol><li><p>删去不符合条件的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nan_cond = False</span><br><span class="line">for col in child_df.columns:</span><br><span class="line">    if col in li:</span><br><span class="line">        nan_cond = nan_cond | (child_df[col] == -8) | (child_df[col] == -1)</span><br><span class="line">child_df.drop(child_df[nan_cond].index, inplace=True)</span><br></pre></td></tr></table></figure></li><li><p>根据关心程度从大到小编码（5-1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">care_code = &#123;1: 5, 2: 4, 3: 3, 4: 2, 5: 1&#125;  # 教育关心程度重新编码</span><br><span class="line">for col in child_df.columns:</span><br><span class="line">    if col in li:</span><br><span class="line">        child_df[col] = child_df[col].map(care_code)</span><br></pre></td></tr></table></figure></li><li><p>关怀程度在2次以上的各个比例及样本量<br>首先将频次变量映射为0-1变量，满足条件的为1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 频次在两次以上，即&gt;=4</span><br><span class="line">for col in child_df.columns:</span><br><span class="line">    if col in li:</span><br><span class="line">        child_df[col] = child_df[col].map(lambda val: 1 if val &gt;= 4 else 0)</span><br></pre></td></tr></table></figure></li></ol><p>进行统计<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;total   city   village&apos;)</span><br><span class="line">print(&apos;count: &apos;, child_df.shape[0], city_df.shape[0], village_df.shape[0])</span><br><span class="line">for col in child_df.columns:</span><br><span class="line">    if col in li:</span><br><span class="line">        print(child_df[col].value_counts(normalize=True).loc[1]*100,</span><br><span class="line">              city_df[col].value_counts(normalize=True).loc[1]*100,</span><br><span class="line">              village_df[col].value_counts(normalize=True).loc[1]*100)</span><br></pre></td></tr></table></figure></p><p>输出(顺序与原文一致)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">total   city   village</span><br><span class="line">count:  3746 802 2944</span><br><span class="line">72.61078483715964 79.30174563591022 70.78804347826086</span><br><span class="line">54.00427122263748 63.71571072319202 51.358695652173914</span><br><span class="line">87.26641751201282 88.5286783042394 86.9225543478261</span><br><span class="line">56.620395088093964 66.20947630922693 54.00815217391305</span><br><span class="line">65.02936465563268 66.08478802992519 64.74184782608695</span><br><span class="line">38.57447944474106 40.64837905236908 38.00951086956522</span><br></pre></td></tr></table></figure></p><p>原文中教育参与的变量分布如下：<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/cfps%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1_6.png" alt></p><h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文献引用&quot;&gt;&lt;a href=&quot;#文献引用&quot; class=&quot;headerlink&quot; title=&quot;文献引用&quot;&gt;&lt;/a&gt;文献引用&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;amp;dbname=CJFDLAST2018&amp;amp;filename=ZGQL201712007&amp;amp;uid=WEEvREcwSlJHSldTTEYzU3EydDVHeHMyVC9Rc1FKVFNDOFJmRVM4alNqdz0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;amp;v=MDM1NzVUcldNMUZyQ1VSTE9lWitSckZDbm5WTC9CUHlyYVlyRzRIOWJOclk5Rlk0UjhlWDFMdXhZUzdEaDFUM3E=&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;刘保中.我国城乡家庭教育投入状况的比较研究——基于CFPS(2014)数据的实证分析[J].中国青年研究,2017(12):45-52.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python数据分析" scheme="http://www.skecis.top/categories/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="http://www.skecis.top/tags/Python/"/>
    
      <category term="数据分析" scheme="http://www.skecis.top/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="CFPS" scheme="http://www.skecis.top/tags/CFPS/"/>
    
  </entry>
  
  <entry>
    <title>Pandas数据结构-Series(二)</title>
    <link href="http://www.skecis.top/2019/10/16/Pandas-Series2/"/>
    <id>http://www.skecis.top/2019/10/16/Pandas-Series2/</id>
    <published>2019-10-16T09:27:53.000Z</published>
    <updated>2019-10-16T10:28:28.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入必要的包"><a href="#导入必要的包" class="headerlink" title="导入必要的包"></a>导入必要的包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br></pre></td></tr></table></figure><h2 id="通过索引对齐值的特性"><a href="#通过索引对齐值的特性" class="headerlink" title="通过索引对齐值的特性"></a>通过索引对齐值的特性</h2><a id="more"></a><h3 id="用”-”操作实现"><a href="#用”-”操作实现" class="headerlink" title="用”+”操作实现"></a>用”+”操作实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s6 = pd.Series([1, 2, 3, 4], index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</span><br><span class="line">s7 = pd.Series([4, 3, 2, 1], index=[&apos;d&apos;, &apos;c&apos;, &apos;b&apos;, &apos;a&apos;])</span><br><span class="line">print(s6 + s7)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a    2</span><br><span class="line">b    4</span><br><span class="line">c    6</span><br><span class="line">d    8</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>Serise的相加是基于索引匹配的<br><strong>如果存在无法匹配的标签，运算结果将为NaN</strong></p><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><h3 id="将所有值乘以一个数"><a href="#将所有值乘以一个数" class="headerlink" title="将所有值乘以一个数"></a>将所有值乘以一个数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s6 * 2)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a    2</span><br><span class="line">b    4</span><br><span class="line">c    6</span><br><span class="line">d    8</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h3 id="两个Series相乘"><a href="#两个Series相乘" class="headerlink" title="两个Series相乘"></a>两个Series相乘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = pd.Series(2, s6.index)</span><br><span class="line">print(s6 * t)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a    2</span><br><span class="line">b    4</span><br><span class="line">c    6</span><br><span class="line">d    8</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h2 id="存在NaN值的情况"><a href="#存在NaN值的情况" class="headerlink" title="存在NaN值的情况"></a>存在NaN值的情况</h2><h3 id="忽略NaN值"><a href="#忽略NaN值" class="headerlink" title="忽略NaN值"></a>忽略NaN值</h3><p>使用了mean()函数求平均<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(np.array([1, 2, 3, 4, np.nan]))</span><br><span class="line">print(s.mean())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.5</span><br></pre></td></tr></table></figure></p><p>不忽略NaN值<br>使用mean()函数的skipna参数，类型为布尔型(boolean)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s.mean(skipna=False))</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nan</span><br></pre></td></tr></table></figure></p><h2 id="布尔选择"><a href="#布尔选择" class="headerlink" title="布尔选择"></a>布尔选择</h2><p>用到的Series<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(np.arange(0, 10))</span><br></pre></td></tr></table></figure></p><p>s:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0    0</span><br><span class="line">1    1</span><br><span class="line">2    2</span><br><span class="line">3    3</span><br><span class="line">4    4</span><br><span class="line">5    5</span><br><span class="line">6    6</span><br><span class="line">7    7</span><br><span class="line">8    8</span><br><span class="line">9    9</span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure></p><h3 id="使用布尔运算符"><a href="#使用布尔运算符" class="headerlink" title="使用布尔运算符"></a>使用布尔运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s &gt; 5)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0    False</span><br><span class="line">1    False</span><br><span class="line">2    False</span><br><span class="line">3    False</span><br><span class="line">4    False</span><br><span class="line">5    False</span><br><span class="line">6     True</span><br><span class="line">7     True</span><br><span class="line">8     True</span><br><span class="line">9     True</span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure></p><p><strong>得到的结果类型仍为Series</strong></p><h3 id="使用逻辑型数值的Series作为索引"><a href="#使用逻辑型数值的Series作为索引" class="headerlink" title="使用逻辑型数值的Series作为索引"></a>使用逻辑型数值的Series作为索引</h3><p>利用了对方括号运算符[ ]的重载，最终只返回对应索引的值为true的对应值的Series片段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bigger_loc = s &gt; 5</span><br><span class="line">print(s[bigger_loc])</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6    6</span><br><span class="line">7    7</span><br><span class="line">8    8</span><br><span class="line">9    9</span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure></p><p>更简介的语法：<code>s[s &gt; 5]</code></p><h3 id="使用复合的布尔运算表达式"><a href="#使用复合的布尔运算表达式" class="headerlink" title="使用复合的布尔运算表达式"></a>使用复合的布尔运算表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s[(s &gt; 5) &amp; (s &lt; 8)])</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6    6</span><br><span class="line">7    7</span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure></p><p><strong>特别注意这里单一的运算周围用的括号()是必须的，否则会报类似下面的错误：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()</span><br></pre></td></tr></table></figure></p><h3 id="函数：all-和any"><a href="#函数：all-和any" class="headerlink" title="函数：all()和any()"></a>函数：all()和any()</h3><p>all()函数：单一逻辑间的<code>且</code>运算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print((s &gt;= 0).all())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure></p><p>any()函数：单一逻辑间的<code>或</code>运算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print((s &lt; 2).any())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure></p><h2 id="重定义Series的索引"><a href="#重定义Series的索引" class="headerlink" title="重定义Series的索引"></a>重定义Series的索引</h2><h3 id="使用index属性"><a href="#使用index属性" class="headerlink" title="使用index属性"></a>使用index属性</h3><p>将一个索引列表(list)传给index属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(np.random.randn(5))</span><br><span class="line">s.index = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a   -0.623722</span><br><span class="line">b   -0.906193</span><br><span class="line">c   -0.424337</span><br><span class="line">d   -0.486135</span><br><span class="line">e   -0.075073</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h3 id="修整连接Series后的索引"><a href="#修整连接Series后的索引" class="headerlink" title="修整连接Series后的索引"></a>修整连接Series后的索引</h3><p>连接后的索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series(np.random.randn(3))</span><br><span class="line">s2 = pd.Series(np.random.randn(3))</span><br><span class="line">combined = pd.concat([s1, s2])</span><br><span class="line">print(combined)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0    0.565139</span><br><span class="line">1    0.033748</span><br><span class="line">2   -1.315617</span><br><span class="line">0    1.064170</span><br><span class="line">1   -1.524376</span><br><span class="line">2    0.391475</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>修整索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">combined.index = np.arange(0, len(combined))</span><br><span class="line">print(combined)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0   -0.169124</span><br><span class="line">1   -1.167542</span><br><span class="line">2   -0.431747</span><br><span class="line">3    0.879552</span><br><span class="line">4   -1.460969</span><br><span class="line">5    0.119569</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h3 id="使用reindex-函数"><a href="#使用reindex-函数" class="headerlink" title="使用reindex()函数"></a>使用reindex()函数</h3><p>参数为索引的列表(list)，<strong>特别要注意的是reindex()函数将会返回一个新的Series实例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series(np.random.randn(4), [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</span><br><span class="line">s2 = s1.reindex([&apos;a&apos;, &apos;c&apos;, &apos;g&apos;])</span><br><span class="line">print(s2)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a   -0.644808</span><br><span class="line">c    1.309109</span><br><span class="line">g         NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>当索引不存在时，会被填充NaN，若要修改填充值，可使用fill_value参数<br>或者使用填充方法参数<code>method</code>：有向前填充(‘ffill’)和向后填充(‘bfill’)两种选择<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s3 = pd.Series([&apos;red&apos;, &apos;green&apos;, &apos;blue&apos;], index=[0, 3, 5])</span><br><span class="line">s3 = s3.reindex(np.arange(0, 7), method=&apos;ffill&apos;)</span><br><span class="line">print(s3)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0      red</span><br><span class="line">1      red</span><br><span class="line">2      red</span><br><span class="line">3    green</span><br><span class="line">4    green</span><br><span class="line">5     blue</span><br><span class="line">6     blue</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></p><h2 id="在本体-in-place-上操作"><a href="#在本体-in-place-上操作" class="headerlink" title="在本体(in-place)上操作"></a>在本体(in-place)上操作</h2><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>直接通过索引赋值<br><code>Series[index] = val</code></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>使用del函数<br><code>del(Series[index])</code></p><h2 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(np.arange(100, 110), index=np.arange(10, 20))</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>s:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10    100</span><br><span class="line">11    101</span><br><span class="line">12    102</span><br><span class="line">13    103</span><br><span class="line">14    104</span><br><span class="line">15    105</span><br><span class="line">16    106</span><br><span class="line">17    107</span><br><span class="line">18    108</span><br><span class="line">19    109</span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure></p><h3 id="形式一：Series-start-end-interval"><a href="#形式一：Series-start-end-interval" class="headerlink" title="形式一：Series[start: end: interval]"></a>形式一：Series[start: end: interval]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s[0:6:2])</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10    100</span><br><span class="line">12    102</span><br><span class="line">14    104</span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure></p><p>等价于<code>s.iloc[[0, 2, 4]]</code></p><h3 id="形式二：Series-start-end"><a href="#形式二：Series-start-end" class="headerlink" title="形式二：Series[start: end]"></a>形式二：Series[start: end]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s[:5])</span><br></pre></td></tr></table></figure><p>等价于<code>s.head(5)</code></p><h3 id="巧妙利用切片"><a href="#巧妙利用切片" class="headerlink" title="巧妙利用切片"></a>巧妙利用切片</h3><p>倒序Series<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s[::-1])</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">19    109</span><br><span class="line">18    108</span><br><span class="line">17    107</span><br><span class="line">16    106</span><br><span class="line">15    105</span><br><span class="line">14    104</span><br><span class="line">13    103</span><br><span class="line">12    102</span><br><span class="line">11    101</span><br><span class="line">10    100</span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure></p><p>从开始位置4，倒叙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s[4::-2])</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">14    104</span><br><span class="line">12    102</span><br><span class="line">10    100</span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导入必要的包&quot;&gt;&lt;a href=&quot;#导入必要的包&quot; class=&quot;headerlink&quot; title=&quot;导入必要的包&quot;&gt;&lt;/a&gt;导入必要的包&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import numpy as np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import pandas as pd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;通过索引对齐值的特性&quot;&gt;&lt;a href=&quot;#通过索引对齐值的特性&quot; class=&quot;headerlink&quot; title=&quot;通过索引对齐值的特性&quot;&gt;&lt;/a&gt;通过索引对齐值的特性&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Python数据分析" scheme="http://www.skecis.top/categories/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="http://www.skecis.top/tags/Python/"/>
    
      <category term="数据分析" scheme="http://www.skecis.top/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Pandas数据结构-Series(一)</title>
    <link href="http://www.skecis.top/2019/10/15/Pandas-Series/"/>
    <id>http://www.skecis.top/2019/10/15/Pandas-Series/</id>
    <published>2019-10-15T11:15:43.000Z</published>
    <updated>2019-10-15T12:22:23.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入必要的包"><a href="#导入必要的包" class="headerlink" title="导入必要的包"></a>导入必要的包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br></pre></td></tr></table></figure><h2 id="创建Series"><a href="#创建Series" class="headerlink" title="创建Series"></a>创建Series</h2><a id="more"></a><h3 id="创建只含一个元素的Series"><a href="#创建只含一个元素的Series" class="headerlink" title="创建只含一个元素的Series"></a>创建只含一个元素的Series</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series(16)</span><br><span class="line">print(s1)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0    16</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h3 id="通过索引获取值"><a href="#通过索引获取值" class="headerlink" title="通过索引获取值"></a>通过索引获取值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val = s1[0]</span><br><span class="line">print(val)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure></p><h3 id="通过列表创建Series"><a href="#通过列表创建Series" class="headerlink" title="通过列表创建Series"></a>通过列表创建Series</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s2 = pd.Series([7, 8, 9, 10, 11])</span><br><span class="line">print(s2)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0     7</span><br><span class="line">1     8</span><br><span class="line">2     9</span><br><span class="line">3    10</span><br><span class="line">4    11</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h3 id="获取Series的所有值或索引"><a href="#获取Series的所有值或索引" class="headerlink" title="获取Series的所有值或索引"></a>获取Series的所有值或索引</h3><p>使用Series实例的两个属性：values和index<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s2.values) # 获取值</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 7  8  9 10 11]</span><br></pre></td></tr></table></figure></p><p>使用index属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s2.index) # 获取索引</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RangeIndex(start=0, stop=5, step=1)</span><br></pre></td></tr></table></figure></p><h3 id="指定值和索引创建Series"><a href="#指定值和索引创建Series" class="headerlink" title="指定值和索引创建Series"></a>指定值和索引创建Series</h3><p>使用了参数index，参数类型为列表(list)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s3 = pd.Series([1, 2, 3], index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;])</span><br><span class="line">print(s3)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h3 id="使用已存在的Series索引创建Series"><a href="#使用已存在的Series索引创建Series" class="headerlink" title="使用已存在的Series索引创建Series"></a>使用已存在的Series索引创建Series</h3><p>将已存在Series的索引(使用index属性)赋值给参数index<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s4 = pd.Series(2, index=s3.index)</span><br><span class="line">print(s4)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a    2</span><br><span class="line">b    2</span><br><span class="line">c    2</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>值的数量不足时，将会依每个索引把值复制一遍</p><h3 id="使用5个正态随机数生成Series"><a href="#使用5个正态随机数生成Series" class="headerlink" title="使用5个正态随机数生成Series"></a>使用5个正态随机数生成Series</h3><p>这里用了numpy的1-darray类型来创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">s5 = pd.Series(dict1)</span><br><span class="line">print(s5)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h2 id="关于Series值的属性、函数和方法"><a href="#关于Series值的属性、函数和方法" class="headerlink" title="关于Series值的属性、函数和方法"></a>关于Series值的属性、函数和方法</h2><p>首先创建一个带有NaN值的Series<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([0, 1, 1, 2, 3, 4, 5, 6, 7, np.nan])</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0    0.0</span><br><span class="line">1    1.0</span><br><span class="line">2    1.0</span><br><span class="line">3    2.0</span><br><span class="line">4    3.0</span><br><span class="line">5    4.0</span><br><span class="line">6    5.0</span><br><span class="line">7    6.0</span><br><span class="line">8    7.0</span><br><span class="line">9    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h3 id="Series的长度"><a href="#Series的长度" class="headerlink" title="Series的长度"></a>Series的长度</h3><p>使用len()函数或size属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(len(s))</span><br></pre></td></tr></table></figure></p><p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s.size)</span><br></pre></td></tr></table></figure></p><p>都将输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure></p><h3 id="Series的尺寸"><a href="#Series的尺寸" class="headerlink" title="Series的尺寸"></a>Series的尺寸</h3><p>使用shape属性，会得到一个元组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s.shape)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(10,)</span><br></pre></td></tr></table></figure></p><h3 id="统计Series中非NaN的值的数量"><a href="#统计Series中非NaN的值的数量" class="headerlink" title="统计Series中非NaN的值的数量"></a>统计Series中非NaN的值的数量</h3><p>使用count()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s.count())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure></p><h3 id="获取Series中的所有的唯一值"><a href="#获取Series中的所有的唯一值" class="headerlink" title="获取Series中的所有的唯一值"></a>获取Series中的所有的唯一值</h3><p>使用unique()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s.unique())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 0.  1.  2.  3.  4.  5.  6.  7. nan]</span><br></pre></td></tr></table></figure></p><h2 id="预览数据的一部分"><a href="#预览数据的一部分" class="headerlink" title="预览数据的一部分"></a>预览数据的一部分</h2><h3 id="预览数据的开头部分"><a href="#预览数据的开头部分" class="headerlink" title="预览数据的开头部分"></a>预览数据的开头部分</h3><p>使用head()函数，可选参数<code>n</code>：需要预览的行数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s.head(3))</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0    0.0</span><br><span class="line">1    1.0</span><br><span class="line">2    1.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h3 id="预览数据的结尾部分"><a href="#预览数据的结尾部分" class="headerlink" title="预览数据的结尾部分"></a>预览数据的结尾部分</h3><p>使用tail()函数，可选参数<code>n</code>：需要预览的行数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s.tail(4))</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6    5.0</span><br><span class="line">7    6.0</span><br><span class="line">8    7.0</span><br><span class="line">9    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h3 id="预览数据的指定部分"><a href="#预览数据的指定部分" class="headerlink" title="预览数据的指定部分"></a>预览数据的指定部分</h3><p>使用take()函数，参数：索引组成的列表(list)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s.take([2, 3, 6]))</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2    1.0</span><br><span class="line">3    2.0</span><br><span class="line">6    5.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h2 id="在Series中查找值"><a href="#在Series中查找值" class="headerlink" title="在Series中查找值"></a>在Series中查找值</h2><p>引用<code>s3</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h3 id="通过索引名查找"><a href="#通过索引名查找" class="headerlink" title="通过索引名查找"></a>通过索引名查找</h3><p>索引名可为列表(list)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s3[&apos;a&apos;])</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></p><h3 id="通过位置-从0开始-查找"><a href="#通过位置-从0开始-查找" class="headerlink" title="通过位置(从0开始)查找"></a>通过位置(从0开始)查找</h3><p>位置可为列表(list)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s3[1])</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></p><h3 id="强行只通过索引名查找"><a href="#强行只通过索引名查找" class="headerlink" title="强行只通过索引名查找"></a>强行只通过索引名查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s5 = pd.Series([1, 2, 3], index=[10, 11, 12])</span><br></pre></td></tr></table></figure><p><code>s5</code>结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10    1</span><br><span class="line">11    2</span><br><span class="line">13    3</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>使用loc[]属性，列表类型，可传入列表(list)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s5.loc[12])</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></p><p>如果索引名不存在会返回NaN，且不能传入位置</p><h3 id="强行只通过位置查找"><a href="#强行只通过位置查找" class="headerlink" title="强行只通过位置查找"></a>强行只通过位置查找</h3><p>使用iloc[]属性，列表类型，可传入列表(list)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s5.iloc[1])</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></p><p>如果位置不存在会报错，且不能传入索引名</p><h3 id="位置和索引名兼容查找-不推荐"><a href="#位置和索引名兼容查找-不推荐" class="headerlink" title="位置和索引名兼容查找(不推荐)"></a>位置和索引名兼容查找(不推荐)</h3><p>使用ix[]属性，列表类型，可传入列表(list)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导入必要的包&quot;&gt;&lt;a href=&quot;#导入必要的包&quot; class=&quot;headerlink&quot; title=&quot;导入必要的包&quot;&gt;&lt;/a&gt;导入必要的包&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import numpy as np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import pandas as pd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;创建Series&quot;&gt;&lt;a href=&quot;#创建Series&quot; class=&quot;headerlink&quot; title=&quot;创建Series&quot;&gt;&lt;/a&gt;创建Series&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Python数据分析" scheme="http://www.skecis.top/categories/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="http://www.skecis.top/tags/Python/"/>
    
      <category term="数据分析" scheme="http://www.skecis.top/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>MySQL语法</title>
    <link href="http://www.skecis.top/2019/10/12/MySQL%E8%AF%AD%E6%B3%95/"/>
    <id>http://www.skecis.top/2019/10/12/MySQL语法/</id>
    <published>2019-10-12T02:56:54.000Z</published>
    <updated>2019-10-12T11:06:36.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE DATABASE &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; DROP DATABASE &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; USE &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE IF NOT EXISTS &lt;表名&gt; (字段名1 字段1类型定义, [...]);</span><br></pre></td></tr></table></figure><p>以下代码创建了一个学生成绩表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE IF NOT EXISTS student_grade</span><br><span class="line">(</span><br><span class="line">    id    INT AUTO_INCREMENT,</span><br><span class="line">    name  CHAR(10),</span><br><span class="line">    sex   CHAR(5),</span><br><span class="line">    age   INT(2),</span><br><span class="line">    grade INT(2),</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">) CHARSET = utf8;</span><br></pre></td></tr></table></figure></p><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; DROP TABLE &lt;表名&gt;;</span><br></pre></td></tr></table></figure><h3 id="向表中插入记录"><a href="#向表中插入记录" class="headerlink" title="向表中插入记录"></a>向表中插入记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; INSERT INTO &lt;表名&gt; (字段名1, [...]) VALUES (值1, [...]);</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT &lt;字段名&gt;, [...] FROM &lt;表名&gt; [WHERE字句] [LIMIT字句];</span><br></pre></td></tr></table></figure><ul><li>可用<code>*</code>替换字段名表示查询所有字段</li><li>WHERE字句包含了查询条件</li><li>LIMIT字句包含了需要返回的记录数量</li></ul><h4 id="WHERE字句"><a href="#WHERE字句" class="headerlink" title="WHERE字句"></a>WHERE字句</h4><p>格式<br><code>WHERE 对象1[关系]对象1的值 [AND|OR] [...]</code><br>例如：查询男生的成绩<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT grade FROM student_grade WHERE sex=<span class="string">'男'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; UPDATE &lt;表名&gt; SET &lt;字段名&gt;=&lt;值&gt;, [...] [WHERE字句];</span><br></pre></td></tr></table></figure><h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; DELETE FROM &lt;表名&gt; [WHERE字句];</span><br></pre></td></tr></table></figure><h3 id="模糊查询：LIKE子句"><a href="#模糊查询：LIKE子句" class="headerlink" title="模糊查询：LIKE子句"></a>模糊查询：LIKE子句</h3><p>例如查询李姓同学的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT * FROM student_grade WHERE name LIKE <span class="string">'李'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="修改字段信息：ALTER命令"><a href="#修改字段信息：ALTER命令" class="headerlink" title="修改字段信息：ALTER命令"></a>修改字段信息：ALTER命令</h3><p>删除字段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ALTER TABLE &lt;表名&gt; DROP &lt;字段名&gt;;</span><br></pre></td></tr></table></figure></p><p>添加字段：ADD子句<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ALTER TABLE &lt;表名&gt; ADD &lt;字段名&gt;&lt;类型&gt;[AFTER &lt;已有字段名&gt;|FIRST];</span><br></pre></td></tr></table></figure></p><p>修改字段类型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ALTER TABLE &lt;表名&gt; MODIFY &lt;字段名&gt; &lt;类型定义&gt;;</span><br></pre></td></tr></table></figure></p><p>修改字段名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ALTER TABLE &lt;表名&gt; CHANGE &lt;需修改字段名&gt; &lt;新字段名&gt; &lt;类型定义&gt;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建数据库&quot;&gt;&lt;a href=&quot;#创建数据库&quot; class=&quot;headerlink&quot; title=&quot;创建数据库&quot;&gt;&lt;/a&gt;创建数据库&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; CREATE DATABASE &amp;lt;数据库名&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;删除数据库&quot;&gt;&lt;a href=&quot;#删除数据库&quot; class=&quot;headerlink&quot; title=&quot;删除数据库&quot;&gt;&lt;/a&gt;删除数据库&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; DROP DATABASE &amp;lt;数据库名&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="程序语言" scheme="http://www.skecis.top/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="数据库" scheme="http://www.skecis.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL安装</title>
    <link href="http://www.skecis.top/2019/10/11/mysql%E5%AE%89%E8%A3%85/"/>
    <id>http://www.skecis.top/2019/10/11/mysql安装/</id>
    <published>2019-10-11T12:55:24.000Z</published>
    <updated>2019-10-14T03:31:42.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows下安装MySQL"><a href="#Windows下安装MySQL" class="headerlink" title="Windows下安装MySQL"></a>Windows下安装MySQL</h2><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL官网下载地址</a></p><h3 id="下载MySQL安装文件"><a href="#下载MySQL安装文件" class="headerlink" title="下载MySQL安装文件"></a>下载MySQL安装文件</h3><p>在下载页面中<code>Select Platform</code>选择<code>Microsoft Windows</code>, 然后在下方的下载选项中选择点击第一个<code>Downloads</code>下载:<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/mysql_install_1_1.png" alt="1.1"><br>跳转到另一个个页面后点击左下角<code>No thanks, just start my download.</code>:<br><img src="https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/mysql_install_1_2.png" alt="1.2"><br>开始下载。下载后得到一个.zip文件。将其解压得到类似<code>mysql-8.0.17-winx64</code>这样的文件夹。<br>将得到的文件夹放入C盘中的DB文件夹中(这里的DB为新建文件夹)得到mysql安装路径为<code>C:\DB\mysql-8.0.17-winx64</code></p><a id="more"></a><h3 id="MySQL配置文件"><a href="#MySQL配置文件" class="headerlink" title="MySQL配置文件"></a>MySQL配置文件</h3><ol><li>打开文件夹<code>C:\DB\mysql-8.0.17-winx64</code>,新建<code>my.ini</code>配置文件</li><li>编辑 my.ini 配置以下基本信息,其中的<code>basedir</code>设置为自己安装文件的路径：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line">port = 3306</span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line">basedir=C:\DB\mysql-8.0.17-winx64</span><br><span class="line"><span class="comment"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span></span><br><span class="line"><span class="comment"># datadir=C:\\web\\sqldata</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line">max_connections=20</span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></li></ol><h3 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h3><p>注：以下命令最好在有管理员权限的cmd中运行<br>切换目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\DB\mysql-8.0.17-winx64\bin</span><br></pre></td></tr></table></figure></p><p>初始化数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure></p><p>执行完成后，会输出 root 用户的初始默认密码，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-05-10T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: APsCY5wg&amp;hgQ</span><br></pre></td></tr></table></figure></p><p><code>APsCY5wg&amp;hgQ</code>即为localhost主机下root用户名的初始密码<br>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld install</span><br></pre></td></tr></table></figure></p><p>启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></p><h3 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 主机名 -u 用户名 -p</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Windows下安装MySQL&quot;&gt;&lt;a href=&quot;#Windows下安装MySQL&quot; class=&quot;headerlink&quot; title=&quot;Windows下安装MySQL&quot;&gt;&lt;/a&gt;Windows下安装MySQL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/downloads/mysql/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL官网下载地址&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;下载MySQL安装文件&quot;&gt;&lt;a href=&quot;#下载MySQL安装文件&quot; class=&quot;headerlink&quot; title=&quot;下载MySQL安装文件&quot;&gt;&lt;/a&gt;下载MySQL安装文件&lt;/h3&gt;&lt;p&gt;在下载页面中&lt;code&gt;Select Platform&lt;/code&gt;选择&lt;code&gt;Microsoft Windows&lt;/code&gt;, 然后在下方的下载选项中选择点击第一个&lt;code&gt;Downloads&lt;/code&gt;下载:&lt;br&gt;&lt;img src=&quot;https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/mysql_install_1_1.png&quot; alt=&quot;1.1&quot;&gt;&lt;br&gt;跳转到另一个个页面后点击左下角&lt;code&gt;No thanks, just start my download.&lt;/code&gt;:&lt;br&gt;&lt;img src=&quot;https://skecis-blog-1300426987.cos.ap-chengdu.myqcloud.com/blog_images/mysql_install_1_2.png&quot; alt=&quot;1.2&quot;&gt;&lt;br&gt;开始下载。下载后得到一个.zip文件。将其解压得到类似&lt;code&gt;mysql-8.0.17-winx64&lt;/code&gt;这样的文件夹。&lt;br&gt;将得到的文件夹放入C盘中的DB文件夹中(这里的DB为新建文件夹)得到mysql安装路径为&lt;code&gt;C:\DB\mysql-8.0.17-winx64&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件安装" scheme="http://www.skecis.top/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="数据库" scheme="http://www.skecis.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>世界那么大-出去看看</title>
    <link href="http://www.skecis.top/2019/10/11/science-internet/"/>
    <id>http://www.skecis.top/2019/10/11/science-internet/</id>
    <published>2019-10-11T04:41:33.000Z</published>
    <updated>2019-10-12T10:19:55.331Z</updated>
    
    <content type="html"><![CDATA[<p>知识不分边界，在这广袤的土地上寻求知识吧</p><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><h3 id="购买一台VPS服务器"><a href="#购买一台VPS服务器" class="headerlink" title="购买一台VPS服务器"></a>购买一台VPS服务器</h3><p><a href="https://bwh88.net/index.php" target="_blank" rel="noopener">BanWaGong</a>挺不错</p><h3 id="远程登录服务器"><a href="#远程登录服务器" class="headerlink" title="远程登录服务器"></a>远程登录服务器</h3><a id="more"></a><p>Windows可用<a href="https://xshell.en.softonic.com/" target="_blank" rel="noopener">Xshell</a>等远程工具</p><h3 id="为服务器部署linux系统，最合适的系统为Centos-6-x86-64-bbr"><a href="#为服务器部署linux系统，最合适的系统为Centos-6-x86-64-bbr" class="headerlink" title="为服务器部署linux系统，最合适的系统为Centos 6 x86_64-bbr"></a>为服务器部署linux系统，最合适的系统为<code>Centos 6 x86_64-bbr</code></h3><h2 id="二、开始"><a href="#二、开始" class="headerlink" title="二、开始"></a>二、开始</h2><h3 id="安装基本工具"><a href="#安装基本工具" class="headerlink" title="安装基本工具"></a>安装基本工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install wget</span><br></pre></td></tr></table></figure><h3 id="安装核心工具SS"><a href="#安装核心工具SS" class="headerlink" title="安装核心工具SS"></a>安装核心工具SS</h3><p>下载工具SS，在服务器终端以root身份执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget — no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br></pre></td></tr></table></figure></p><h3 id="修改执行权限"><a href="#修改执行权限" class="headerlink" title="修改执行权限"></a>修改执行权限</h3><p>执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x shadowsocks.sh</span><br></pre></td></tr></table></figure></p><h3 id="运行安装"><a href="#运行安装" class="headerlink" title="运行安装"></a>运行安装</h3><p>执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure></p><h3 id="安装过程中"><a href="#安装过程中" class="headerlink" title="安装过程中"></a>安装过程中</h3><p>执行刚刚的命令后，开始安装SS，安装过程中会有修改端口、密码等提示，可修改也可遵从默认，接着会选择加密方式，这里选择<code>aes-256-cfb</code></p><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p>完成安装后，会显示你的所有配置信息:端口，密码，加密方式等以供记忆。</p><h2 id="三、写在后面"><a href="#三、写在后面" class="headerlink" title="三、写在后面"></a>三、写在后面</h2><p>请合理使用SS工具，学习自己所需要的知识，毕竟工具开发原作者曾被请去喝茶，之后便不再维护了。</p><h4 id="爱祖国，爱社会"><a href="#爱祖国，爱社会" class="headerlink" title="爱祖国，爱社会"></a>爱祖国，爱社会</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知识不分边界，在这广袤的土地上寻求知识吧&lt;/p&gt;&lt;h2 id=&quot;一、准备&quot;&gt;&lt;a href=&quot;#一、准备&quot; class=&quot;headerlink&quot; title=&quot;一、准备&quot;&gt;&lt;/a&gt;一、准备&lt;/h2&gt;&lt;h3 id=&quot;购买一台VPS服务器&quot;&gt;&lt;a href=&quot;#购买一台VPS服务器&quot; class=&quot;headerlink&quot; title=&quot;购买一台VPS服务器&quot;&gt;&lt;/a&gt;购买一台VPS服务器&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://bwh88.net/index.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BanWaGong&lt;/a&gt;挺不错&lt;/p&gt;&lt;h3 id=&quot;远程登录服务器&quot;&gt;&lt;a href=&quot;#远程登录服务器&quot; class=&quot;headerlink&quot; title=&quot;远程登录服务器&quot;&gt;&lt;/a&gt;远程登录服务器&lt;/h3&gt;
    
    </summary>
    
    
      <category term="小技能" scheme="http://www.skecis.top/categories/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="get小技能" scheme="http://www.skecis.top/tags/get%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="http://www.skecis.top/2019/10/10/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.skecis.top/2019/10/10/git学习笔记/</id>
    <published>2019-10-10T12:42:16.000Z</published>
    <updated>2019-10-12T10:18:08.889Z</updated>
    
    <content type="html"><![CDATA[<p>记录学习的一些Git常用命令</p><h2 id="git本地操作"><a href="#git本地操作" class="headerlink" title="git本地操作"></a>git本地操作</h2><h3 id="生成git仓库"><a href="#生成git仓库" class="headerlink" title="生成git仓库"></a>生成git仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h3 id="从当前git仓库添加并提交文件"><a href="#从当前git仓库添加并提交文件" class="headerlink" title="从当前git仓库添加并提交文件"></a>从当前git仓库添加并提交文件</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add . | git add &lt;filename&gt;</span><br><span class="line">$ git commit -m <span class="string">"注释"</span></span><br></pre></td></tr></table></figure><p>上述第一条命令的作用为添加目录下所有文件到仓库或者添加单个文件到暂存仓库，第二条命令的作用是提交添加的所有文件到当前分支。<br>每一次修改，如果不用git add将其放入仓库，则在使用git commit时则不会对其提交</p><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><ol><li><p>查看git仓库的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure></li><li><p>查看文件的改动信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff &lt;filename&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><ol><li><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></li><li><p>回退上一个版本：HEAD^  回退上上一个版本：HEAD^^（HEAD^n）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure></li><li><p>查看历史命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure></li></ol><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><ol><li><p>撤销工作区的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure></li><li><p>撤销暂存区的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD &lt;filename&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>从版本库中删除并提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm &lt;filename&gt;</span><br></pre></td></tr></table></figure></p><h2 id="git远程仓库"><a href="#git远程仓库" class="headerlink" title="git远程仓库"></a>git远程仓库</h2><h3 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"邮箱"</span></span><br><span class="line">$ git config --global user.name <span class="string">"用户名"</span></span><br></pre></td></tr></table></figure><h3 id="提交文件到远程仓库"><a href="#提交文件到远程仓库" class="headerlink" title="提交文件到远程仓库"></a>提交文件到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin master git@github.com:username/repository.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>第二行命令有可选参数<code>-f</code>意为强制提交</p><h3 id="另一方使用同一仓库，在push前需要拉取最新版本"><a href="#另一方使用同一仓库，在push前需要拉取最新版本" class="headerlink" title="另一方使用同一仓库，在push前需要拉取最新版本"></a>另一方使用同一仓库，在push前需要拉取最新版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull --rebase origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录学习的一些Git常用命令&lt;/p&gt;&lt;h2 id=&quot;git本地操作&quot;&gt;&lt;a href=&quot;#git本地操作&quot; class=&quot;headerlink&quot; title=&quot;git本地操作&quot;&gt;&lt;/a&gt;git本地操作&lt;/h2&gt;&lt;h3 id=&quot;生成git仓库&quot;&gt;&lt;a href=&quot;#生成git仓库&quot; class=&quot;headerlink&quot; title=&quot;生成git仓库&quot;&gt;&lt;/a&gt;生成git仓库&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;从当前git仓库添加并提交文件&quot;&gt;&lt;a href=&quot;#从当前git仓库添加并提交文件&quot; class=&quot;headerlink&quot; title=&quot;从当前git仓库添加并提交文件&quot;&gt;&lt;/a&gt;从当前git仓库添加并提交文件&lt;/h3&gt;
    
    </summary>
    
    
      <category term="小技能" scheme="http://www.skecis.top/categories/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="get小技能" scheme="http://www.skecis.top/tags/get%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-模型实现</title>
    <link href="http://www.skecis.top/2019/09/15/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/"/>
    <id>http://www.skecis.top/2019/09/15/西瓜书学习之旅/</id>
    <published>2019-09-15T11:12:45.000Z</published>
    <updated>2019-10-14T00:39:43.088Z</updated>
    
    <content type="html"><![CDATA[<p>基于周志华西瓜书中的数据集和各个机器学习模型的算法原理，采用python编写代码</p><h2 id="一-模型清单"><a href="#一-模型清单" class="headerlink" title="一. 模型清单"></a>一. 模型清单</h2><ul><li><strong>逻辑回归</strong></li><li><strong>线性判别分析</strong></li><li><strong>决策树</strong><ol><li>划分选择<ol><li>基于信息增益</li><li>基于基尼指数</li></ol></li><li>剪枝<ol><li>预剪枝</li><li>后剪枝 <a id="more"></a></li></ol></li></ol></li><li><strong>神经网络</strong><ol><li>标准BP算法</li></ol></li><li><strong>（待续）</strong><h2 id="二-代码清单"><a href="#二-代码清单" class="headerlink" title="二. 代码清单"></a>二. 代码清单</h2>代码中重要的部分都配有蹩脚的英文注释（T.T苦学英语ing），具体使用的数据集内容请参考代码引用和数据集清单。</li><li><a href="https://github.com/SkecisAI/ML-Practice/blob/master/logistic_regression.py" target="_blank" rel="noopener">logistic_regression</a>: 逻辑回归实现。</li><li><a href="https://github.com/SkecisAI/ML-Practice/blob/master/linear_discriminant_analysis.py" target="_blank" rel="noopener">linear_discriminant_analysis</a>: 线性判别分析实现。</li><li><a href="https://github.com/SkecisAI/ML-Practice/blob/master/decision_tree.py" target="_blank" rel="noopener">decision_tree</a>: 决策树实现，集成各个思想，包含划分方式有<code>信息增益</code>、<code>基尼指数</code>，连续值的处理方式有<code>平均值法</code>、<code>二分法</code>，以及剪枝方法有<code>预剪枝</code>、<code>后剪枝</code>。</li><li><a href="https://github.com/SkecisAI/ML-Practice/blob/master/neural_network.py" target="_blank" rel="noopener">neural_network</a>: 神经网络实现，标准BP算法。</li><li>（待续）<h2 id="三-数据集清单"><a href="#三-数据集清单" class="headerlink" title="三. 数据集清单"></a>三. 数据集清单</h2>均为csv文件，内容如下</li><li><a href="https://github.com/SkecisAI/ML-Practice/blob/master/watermelon.csv" target="_blank" rel="noopener">西瓜数据集3.0alpha</a></li><li><a href="https://github.com/SkecisAI/ML-Practice/blob/master/watermelon4.csv" target="_blank" rel="noopener">西瓜数据集2.0</a></li><li><a href="https://github.com/SkecisAI/ML-Practice/blob/master/watermelon3.csv" target="_blank" rel="noopener">西瓜数据集3.0</a></li></ul><p><em>才疏学浅，以上资料仅供参考，交流。</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于周志华西瓜书中的数据集和各个机器学习模型的算法原理，采用python编写代码&lt;/p&gt;
&lt;h2 id=&quot;一-模型清单&quot;&gt;&lt;a href=&quot;#一-模型清单&quot; class=&quot;headerlink&quot; title=&quot;一. 模型清单&quot;&gt;&lt;/a&gt;一. 模型清单&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;逻辑回归&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线性判别分析&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;决策树&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;划分选择&lt;ol&gt;
&lt;li&gt;基于信息增益&lt;/li&gt;
&lt;li&gt;基于基尼指数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;剪枝&lt;ol&gt;
&lt;li&gt;预剪枝&lt;/li&gt;
&lt;li&gt;后剪枝
    
    </summary>
    
    
      <category term="机器学习" scheme="http://www.skecis.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.skecis.top/tags/Python/"/>
    
      <category term="机器学习" scheme="http://www.skecis.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
